---
# Add GNOME Favorites Based on Installed Software
- name: Dynamically Configure GNOME Favorites for NOX VFX
  hosts: all
  become: yes
  gather_facts: yes
  
  vars:
    # Software detection mapping (command/path -> desktop file)
    software_detection:
      # Foundry Applications
      foundry_nuke:
        check_command: "find /opt /usr/local -name 'Nuke*.0' -type f 2>/dev/null | head -1"
        desktop_file: "foundry-nuke16.desktop"
        display_name: "Foundry Nuke"
      
      foundry_nukex:
        check_command: "find /opt /usr/local -name 'Nuke*.0' -type f 2>/dev/null | head -1"
        desktop_file: "foundry-nukex16.desktop"
        display_name: "Foundry NukeX"
      
      foundry_nukestudio:
        check_command: "find /opt /usr/local -name 'Nuke*.0' -type f 2>/dev/null | head -1"
        desktop_file: "foundry-nukestudio16.desktop"
        display_name: "Foundry NukeStudio"
      
      # Remote Desktop
      nice_dcv:
        check_command: "command -v dcv"
        desktop_file: "dcv-viewer.desktop"
        display_name: "Nice DCV"
      
      # Communication
      slack:
        check_command: "flatpak list | grep -q com.slack.Slack || command -v slack"
        desktop_file: "com.slack.Slack.desktop"
        display_name: "Slack"
      
      # Autodesk
      autodesk_rv:
        check_command: "command -v rv || find /opt -name 'rv' -type f 2>/dev/null | head -1"
        desktop_file: "rv.desktop"
        display_name: "Autodesk RV"
      
      # Other VFX Tools
      xstudio:
        check_command: "command -v xstudio || find /opt -name 'xstudio' -type f 2>/dev/null | head -1"
        desktop_file: "xstudio.desktop"
        display_name: "xStudio"
      
      deadline_monitor:
        check_command: "command -v deadlinemonitor || find /opt -name 'deadlinemonitor' -type f 2>/dev/null | head -1"
        desktop_file: "deadline-monitor.desktop"
        display_name: "Deadline Monitor"
      
      # Development Tools
      vscode:
        check_command: "command -v code"
        desktop_file: "code.desktop"
        display_name: "VS Code"
      
      sublime_text:
        check_command: "command -v subl || command -v sublime_text"
        desktop_file: "sublime_text.desktop"
        display_name: "Sublime Text"
      
      # Browsers
      chrome:
        check_command: "command -v google-chrome"
        desktop_file: "google-chrome.desktop"
        display_name: "Google Chrome"
      
      brave:
        check_command: "command -v brave-browser"
        desktop_file: "brave-browser.desktop"
        display_name: "Brave Browser"
      
      # 3D/VFX Applications
      blender:
        check_command: "command -v blender || flatpak list | grep -q org.blender.Blender"
        desktop_file: "org.blender.Blender.desktop"
        display_name: "Blender"
      
      houdini:
        check_command: "find /opt -name 'houdini*' -type f 2>/dev/null | head -1 || command -v houdini"
        desktop_file: "houdini.desktop"
        display_name: "Houdini"
      
      das_element:
        check_command: "command -v daselement || find /opt -name '*daselement*' -type f 2>/dev/null | head -1"
        desktop_file: "daselement.desktop"
        display_name: "Das Element"
      
      davinci_resolve:
        check_command: "find /opt -name '*resolve*' -type f 2>/dev/null | head -1 || command -v resolve"
        desktop_file: "resolve.desktop"
        display_name: "DaVinci Resolve"
      
      krita:
        check_command: "command -v krita || flatpak list | grep -q org.kde.krita"
        desktop_file: "org.kde.krita.desktop"
        display_name: "Krita"
      
      # Boris FX
      boris_mocha:
        check_command: "find /opt -name '*mocha*' -type f 2>/dev/null | head -1 || command -v mocha"
        desktop_file: "mocha.desktop"
        display_name: "Boris Mocha"
      
      boris_silhouette:
        check_command: "find /opt -name '*silhouette*' -type f 2>/dev/null | head -1 || command -v silhouette"
        desktop_file: "silhouette.desktop"
        display_name: "Boris Silhouette"

  tasks:
    - name: Display dynamic favorites detection plan
      ansible.builtin.debug:
        msg: |
          📌 NOX VFX Dynamic GNOME Favorites Configuration
          
          Target: {{ inventory_hostname }}
          
          🔍 Will detect and add to favorites:
          • Foundry: Nuke, NukeX, NukeStudio
          • Remote: Nice DCV
          • Communication: Slack
          • Autodesk: RV
          • VFX Tools: xStudio, Deadline Monitor
          • Development: VS Code, Sublime Text
          • Browsers: Chrome, Brave
          • 3D/VFX: Blender, Houdini, Das Element, DaVinci Resolve, Krita
          • Boris FX: Mocha, Silhouette
          
          🎯 Only installed software will be added to favorites

    # ====== SOFTWARE DETECTION ======
    - name: Detect installed VFX software
      ansible.builtin.shell: "{{ item.value.check_command }}"
      register: software_check
      failed_when: false
      changed_when: false
      with_dict: "{{ software_detection }}"
      
    - name: Build list of found software
      ansible.builtin.set_fact:
        found_software: "{{ found_software | default([]) + [{'name': item.item.key, 'desktop_file': item.item.value.desktop_file, 'display_name': item.item.value.display_name}] }}"
      when: item.rc == 0
      with_items: "{{ software_check.results }}"

    - name: Display detected software
      ansible.builtin.debug:
        msg: |
          🔍 Detected Software:
          {% for software in found_software | default([]) %}
          • {{ software.display_name }} ({{ software.desktop_file }})
          {% endfor %}
          {% if not found_software %}
          ⚠️ No VFX software detected on this machine
          {% endif %}

    # ====== ALWAYS INCLUDE BASIC APPLICATIONS ======
    - name: Add essential desktop applications to favorites
      ansible.builtin.set_fact:
        essential_apps:
          - name: "nautilus"
            desktop_file: "org.gnome.Nautilus.desktop"
            display_name: "File Manager"

    - name: Combine essential apps with detected software
      ansible.builtin.set_fact:
        final_favorites: "{{ essential_apps + (found_software | default([])) }}"

    - name: Create final favorites list (desktop files only)
      ansible.builtin.set_fact:
        gnome_favorites_list: "{{ final_favorites | map(attribute='desktop_file') | list }}"

    - name: Display final favorites configuration
      ansible.builtin.debug:
        msg: |
          📌 Final GNOME Favorites List:
          {% for app in final_favorites %}
          {{ loop.index }}. {{ app.display_name }}
          {% endfor %}

    # ====== APPLY TO CURRENT USERS ======
    - name: Apply dynamic favorites to currently logged-in GNOME users
      ansible.builtin.shell: |
        for user in $(ps aux | grep -v grep | grep gnome-shell | awk '{print $1}' | sort | uniq); do
          if [ -n "$user" ] && [ "$user" != "gdm" ]; then
            user_id=$(id -u "$user" 2>/dev/null)
            if [ -n "$user_id" ] && [ -S "/run/user/$user_id/bus" ]; then
              echo "Setting dynamic favorites for logged-in user: $user"
              
              # Set the dynamic favorites list
              sudo -u "$user" DISPLAY=:0 DBUS_SESSION_BUS_ADDRESS="unix:path=/run/user/$user_id/bus" \
                gsettings set org.gnome.shell favorite-apps '{{ gnome_favorites_list | to_json }}' 2>/dev/null || true
              
              echo "Dynamic favorites applied for user: $user"
            fi
          fi
        done
      when: gnome_favorites_list is defined and gnome_favorites_list | length > 0
      ignore_errors: yes

    # ====== CREATE FUTURE USER CONFIGURATION ======
    - name: Create dynamic favorites script for future logins
      ansible.builtin.copy:
        content: |
          #!/bin/bash
          # NOX VFX Dynamic GNOME Favorites Script
          
          # Wait for GNOME session to be ready
          sleep 20
          
          if [ "$XDG_CURRENT_DESKTOP" = "GNOME" ] && [ -n "$DISPLAY" ]; then
              # Set up environment
              if [ -z "$DBUS_SESSION_BUS_ADDRESS" ]; then
                  export DBUS_SESSION_BUS_ADDRESS="unix:path=/run/user/$(id -u)/bus"
              fi
              
              # Wait for GNOME Shell to be available
              timeout=60
              while [ $timeout -gt 0 ]; do
                  if gsettings list-schemas | grep -q "org.gnome.shell" && pgrep -x gnome-shell > /dev/null; then
                      break
                  fi
                  sleep 2
                  ((timeout--))
              done
              
              echo "Applying NOX VFX dynamic favorites for user $(whoami)..."
              
              # Apply the detected favorites
              gsettings set org.gnome.shell favorite-apps '{{ gnome_favorites_list | to_json }}' 2>/dev/null || true
              
              logger "NOX VFX dynamic favorites applied for user $(whoami)"
          fi
        dest: /usr/local/bin/set-nox-dynamic-favorites.sh
        mode: '0755'
      when: gnome_favorites_list is defined and gnome_favorites_list | length > 0

    - name: Create autostart entry for dynamic favorites
      ansible.builtin.copy:
        content: |
          [Desktop Entry]
          Type=Application
          Name=NOX Dynamic Favorites
          Comment=Apply NOX VFX dynamic GNOME favorites based on installed software
          Exec=/usr/local/bin/set-nox-dynamic-favorites.sh
          Hidden=false
          NoDisplay=true
          X-GNOME-Autostart-enabled=true
          X-GNOME-Autostart-Delay=25
          Categories=System;Settings;
          StartupNotify=false
        dest: /etc/xdg/autostart/nox-dynamic-favorites.desktop
        mode: '0644'
      when: gnome_favorites_list is defined and gnome_favorites_list | length > 0

    # ====== VERIFICATION ======
    - name: Create dynamic favorites verification script
      ansible.builtin.copy:
        content: |
          #!/bin/bash
          echo "=== NOX VFX Dynamic Favorites Verification ==="
          echo
          
          if [ "$XDG_CURRENT_DESKTOP" != "GNOME" ]; then
              echo "❌ Not in GNOME session"
              echo "   Please run this from a GNOME desktop environment"
              exit 1
          fi
          
          echo "📌 Current GNOME Favorites:"
          current_favorites=$(gsettings get org.gnome.shell favorite-apps 2>/dev/null)
          echo "$current_favorites"
          echo
          
          echo "🔍 Detected NOX VFX Software:"
          {% for software in found_software | default([]) %}
          if [ -f "/usr/share/applications/{{ software.desktop_file }}" ] || [ -f "/var/lib/flatpak/exports/share/applications/{{ software.desktop_file }}" ]; then
              echo "✅ {{ software.display_name }}"
          else
              echo "⚠️ {{ software.display_name }} (desktop file not found)"
          fi
          {% endfor %}
          {% if not found_software %}
          echo "⚠️ No VFX software detected"
          {% endif %}
          echo
          
          echo "📋 Favorites Status:"
          {% for app in final_favorites | default([]) %}
          if [[ "$current_favorites" == *"{{ app.desktop_file }}"* ]]; then
              echo "✅ {{ app.display_name }} in favorites"
          else
              echo "❌ {{ app.display_name }} not in favorites"
          fi
          {% endfor %}
          echo
          
          echo "🎯 NOX VFX Dynamic Favorites: {{ 'Configured' if gnome_favorites_list else 'No software detected' }}"
        dest: /usr/local/bin/verify-nox-dynamic-favorites.sh
        mode: '0755'

    - name: Display completion summary
      ansible.builtin.debug:
        msg: |
          📌 NOX VFX Dynamic Favorites Configuration Complete!
          
          ✅ Detection Results:
          {% if found_software %}
          {% for software in found_software %}
          • {{ software.display_name }}
          {% endfor %}
          {% else %}
          • No VFX software detected on this machine
          {% endif %}
          
          🎯 Favorites Configuration:
          {% if gnome_favorites_list and gnome_favorites_list | length > 0 %}
          • {{ gnome_favorites_list | length }} applications added to favorites
          • Applied to currently logged-in users
          • Configured for future user logins
          {% else %}
          • No favorites configured (no software detected)
          {% endif %}
          
          📋 Verification:
          Run as user: /usr/local/bin/verify-nox-dynamic-favorites.sh
          
          🔄 Changes take effect:
          • Immediately for logged-in users
          • At next login for new users
          • After GNOME Shell restart (Alt+F2, type 'r')
          
          💡 Re-run this playbook after installing new VFX software
          to automatically update GNOME favorites!
