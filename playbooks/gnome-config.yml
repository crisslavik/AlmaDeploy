# ====== USER SESSION SCRIPTS ======
- name: Create GNOME theme and configuration script for user sessions
  ansible.builtin.copy:
    content: |
      #!/bin/bash
      # NOX VFX GNOME Theme and Configuration Script
      # Works with local sessions, X11, Wayland, and DCV virtual sessions
      
      LOG_FILE="/tmp/nox-gnome-config-$(whoami).log"
      CONFIG_FLAG="$HOME/.config/nox-gnome-configured"
      
      exec > >(tee -a "$LOG_FILE") 2>&1
      
      echo "$(date): Starting NOX GNOME configuration for user $(whoami)"
      
      # Check if user has already been configured
      check_if_configured() {
          if [ -f "$CONFIG_FLAG" ]; then
              # Check if this is a forced reconfiguration
              if [ "$1" != "--force" ]; then
                  echo "‚úÖ NOX GNOME configuration already applied for this user"
                  echo "   Flag file: $CONFIG_FLAG"
                  echo "   To reconfigure, delete this file or run with --force"
                  
                  # Only apply theme settings (non-intrusive)
                  apply_theme_only
                  exit 0
              else
                  echo "üîÑ Force reconfiguration requested"
              fi
          fi
      }
      
      # Detect display server and session info
      detect_session() {
          # Try to get DISPLAY from environment or find it
          if [ -z "$DISPLAY" ]; then
              # Try to find DISPLAY from running processes
              DISPLAY=$(ps e -u $(whoami) | grep -oP 'DISPLAY=\K[^ ]+' | head -1)
              [ -z "$DISPLAY" ] && DISPLAY=":0"
          fi
          export DISPLAY
          
          # Set up DBUS if not already set
          if [ -z "$DBUS_SESSION_BUS_ADDRESS" ]; then
              DBUS_SESSION_BUS_ADDRESS="unix:path=/run/user/$(id -u)/bus"
              export DBUS_SESSION_BUS_ADDRESS
          fi
          
          echo "Session info: DISPLAY=$DISPLAY, DBUS=$DBUS_SESSION_BUS_ADDRESS"
          echo "Desktop: $XDG_CURRENT_DESKTOP, Session: $XDG_SESSION_TYPE"
      }
      
      # Wait for GNOME to be ready with dynamic timeout
      wait_for_gnome() {
          local max_wait=120  # 2 minutes max
          local waited=0
          
          echo "Waiting for GNOME session to be ready..."
          
          while [ $waited -lt $max_wait ]; do
              # Check if gsettings is available and GNOME Shell is running
              if command -v gsettings >/dev/null 2>&1; then
                  if gsettings list-schemas 2>/dev/null | grep -q "org.gnome.desktop.interface"; then
                      if pgrep -x gnome-shell >/dev/null 2>&1 || pgrep -x gnome-session >/dev/null 2>&1; then
                          echo "‚úÖ GNOME session ready after ${waited}s"
                          return 0
                      fi
                  fi
              fi
              sleep 2
              waited=$((waited + 2))
          done
          
          echo "‚ö†Ô∏è GNOME session not detected after ${max_wait}s, attempting configuration anyway..."
          return 1
      }
      
      # Apply only theme settings (non-intrusive, runs every login)
      apply_theme_only() {
          echo "Applying theme settings only..."
          
          # Dark theme
          gsettings set org.gnome.desktop.interface gtk-theme 'Adwaita-dark' 2>/dev/null
          gsettings set org.gnome.desktop.interface color-scheme 'prefer-dark' 2>/dev/null
          
          # Window manager theme
          gsettings set org.gnome.desktop.wm.preferences theme 'Adwaita-dark' 2>/dev/null
          
          echo "‚úÖ Theme settings refreshed"
      }
      
      # Apply GNOME settings with error handling (ONLY on first run)
      apply_settings() {
          echo "Applying FULL NOX VFX GNOME settings (first-time configuration)..."
          
          # Dark theme
          gsettings set org.gnome.desktop.interface gtk-theme 'Adwaita-dark' 2>/dev/null && \
              echo "‚úÖ GTK theme set" || echo "‚ö†Ô∏è Failed to set GTK theme"
          
          gsettings set org.gnome.desktop.interface color-scheme 'prefer-dark' 2>/dev/null && \
              echo "‚úÖ Color scheme set" || echo "‚ö†Ô∏è Failed to set color scheme"
          
          # Interface settings
          gsettings set org.gnome.desktop.interface show-battery-percentage true 2>/dev/null
          gsettings set org.gnome.desktop.interface clock-show-weekday true 2>/dev/null
          gsettings set org.gnome.desktop.interface clock-show-seconds false 2>/dev/null
          gsettings set org.gnome.desktop.interface enable-hot-corners false 2>/dev/null
          echo "‚úÖ Interface settings applied"
          
          # Window manager
          gsettings set org.gnome.desktop.wm.preferences button-layout 'appmenu:minimize,maximize,close' 2>/dev/null
          gsettings set org.gnome.desktop.wm.preferences theme 'Adwaita-dark' 2>/dev/null
          echo "‚úÖ Window manager settings applied"
          
          # File manager
          gsettings set org.gtk.settings.file-chooser show-hidden false 2>/dev/null
          gsettings set org.gtk.settings.file-chooser show-size-column true 2>/dev/null
          gsettings set org.gtk.settings.file-chooser show-type-column true 2>/dev/null
          gsettings set org.gtk.settings.file-chooser sort-directories-first true 2>/dev/null
          echo "‚úÖ File manager settings applied"
          
          # Power settings (safe for both physical and virtual machines)
          gsettings set org.gnome.settings-daemon.plugins.power sleep-inactive-ac-type 'nothing' 2>/dev/null
          echo "‚úÖ Power settings applied"
          
          # Enable extensions
          gsettings set org.gnome.shell enabled-extensions "['dash-to-dock@micxgx.gmail.com', 'user-theme@gnome-shell-extensions.gcampax.github.com', 'desktop-icons@csoriano']" 2>/dev/null && \
              echo "‚úÖ Extensions enabled" || echo "‚ö†Ô∏è Failed to enable extensions"
          
          # Configure Dash to Dock - ONLY ON FIRST RUN
          echo "üìå Configuring Dash to Dock defaults (you can customize these after login)..."
          gsettings set org.gnome.shell.extensions.dash-to-dock dock-position 'BOTTOM' 2>/dev/null
          gsettings set org.gnome.shell.extensions.dash-to-dock dock-fixed false 2>/dev/null
          gsettings set org.gnome.shell.extensions.dash-to-dock autohide true 2>/dev/null
          gsettings set org.gnome.shell.extensions.dash-to-dock intellihide true 2>/dev/null
          gsettings set org.gnome.shell.extensions.dash-to-dock extend-height false 2>/dev/null
          gsettings set org.gnome.shell.extensions.dash-to-dock show-trash true 2>/dev/null
          gsettings set org.gnome.shell.extensions.dash-to-dock show-mounts true 2>/dev/null
          echo "‚úÖ Dash to Dock configured with defaults"
          
          # Nautilus (file manager) optimizations
          gsettings set org.gnome.nautilus.preferences default-folder-viewer 'list-view' 2>/dev/null
          gsettings set org.gnome.nautilus.preferences search-filter-time-type 'last_modified' 2>/dev/null
          gsettings set org.gnome.nautilus.preferences show-create-link true 2>/dev/null
          gsettings set org.gnome.nautilus.preferences show-delete-permanently true 2>/dev/null
          echo "‚úÖ Nautilus preferences set"
          
          # Terminal theme
          profile_id=$(gsettings get org.gnome.Terminal.ProfilesList default 2>/dev/null | tr -d "'")
          if [ -n "$profile_id" ]; then
              gsettings set org.gnome.Terminal.Legacy.Profile:/org/gnome/terminal/legacy/profiles:/:$profile_id/ use-theme-colors false 2>/dev/null
              gsettings set org.gnome.Terminal.Legacy.Profile:/org/gnome/terminal/legacy/profiles:/:$profile_id/ background-color 'rgb(23,20,33)' 2>/dev/null
              gsettings set org.gnome.Terminal.Legacy.Profile:/org/gnome/terminal/legacy/profiles:/:$profile_id/ foreground-color 'rgb(208,207,204)' 2>/dev/null
              echo "‚úÖ Terminal theme applied"
          fi
          
          # Create flag file to prevent re-running full config
          mkdir -p "$(dirname "$CONFIG_FLAG")"
          cat > "$CONFIG_FLAG" << EOF
NOX VFX GNOME Configuration Applied
Date: $(date)
User: $(whoami)
Display: $DISPLAY
Session: $XDG_SESSION_TYPE

This file indicates that NOX GNOME configuration has been applied.
To reconfigure, delete this file and restart your session.
To force reconfiguration, run: /usr/local/bin/set-nox-gnome-config.sh --force

Note: Theme settings are refreshed on every login, but Dash-to-Dock
and other user preferences are only set once to preserve your customizations.
EOF
          echo "‚úÖ Configuration flag created: $CONFIG_FLAG"
      }
      
      # Main execution
      main() {
          # Check if already configured (unless --force flag is used)
          check_if_configured "$1"
          
          detect_session
          
          # Initial wait before starting
          sleep 10
          
          # Wait for GNOME to be ready
          wait_for_gnome
          
          # Apply full settings (first time only)
          apply_settings
          
          # Log to system journal if available
          if command -v logger >/dev/null 2>&1; then
              logger "NOX VFX GNOME configuration applied for user $(whoami) on DISPLAY=$DISPLAY"
          fi
          
          echo "$(date): NOX GNOME configuration completed successfully"
          echo "Log saved to: $LOG_FILE"
          echo ""
          echo "‚ÑπÔ∏è  Your Dash-to-Dock customizations will be preserved on future logins"
      }
      
      # Run main function with any passed arguments
      main "$@"
    dest: /usr/local/bin/set-nox-gnome-config.sh
    mode: '0755'
