---
# Safe NVIDIA Installation - Prevents Login Issues
- name: Safe NVIDIA Driver Installation
  hosts: all
  become: yes
  gather_facts: yes
  
  vars:
    install_cuda: true
    install_nvidia_settings: true
    skip_xorg_config: true  # CRITICAL: Don't create custom X.Org config
    
  tasks:
    - name: Display safe installation plan
      ansible.builtin.debug:
        msg: |
          üéÆ Safe NVIDIA Installation (AlmaLinux Native)
          
          Target: {{ inventory_hostname }}
          
          ‚úÖ This version prevents login issues by:
          ‚Ä¢ Using AlmaLinux native packages only
          ‚Ä¢ NOT creating custom X.Org configuration
          ‚Ä¢ Blacklisting nouveau properly
          ‚Ä¢ Not forcing X server restarts
          
          ‚ö†Ô∏è System will reboot after installation to activate drivers safely

    - name: Check for NVIDIA GPU
      ansible.builtin.shell: lspci | grep -i nvidia
      register: nvidia_hardware
      failed_when: false
      changed_when: false

    - name: Fail if no NVIDIA hardware
      ansible.builtin.fail:
        msg: "No NVIDIA hardware detected"
      when: nvidia_hardware.stdout == ""

    # ====== BLACKLIST NOUVEAU PROPERLY ======
    - name: Blacklist nouveau driver (prevents conflicts)
      ansible.builtin.copy:
        content: |
          blacklist nouveau
          options nouveau modeset=0
        dest: /etc/modprobe.d/blacklist-nouveau.conf
        mode: '0644'

    - name: Regenerate initramfs to apply nouveau blacklist
      ansible.builtin.command: dracut --force
      register: dracut_result
      changed_when: true

    # ====== INSTALL NVIDIA USING ALMALINUX NATIVE METHOD ======
    - name: Update system packages
      ansible.builtin.dnf:
        name: "*"
        state: latest

    - name: Install kernel development packages
      ansible.builtin.dnf:
        name:
          - kernel-devel
          - kernel-headers
          - gcc
          - make
          - dkms
        state: present

    - name: Install NVIDIA driver (AlmaLinux native)
      ansible.builtin.dnf:
        name:
          - nvidia-driver
          - nvidia-driver-libs
          - nvidia-driver-cuda
          - nvidia-driver-cuda-libs
          - nvidia-settings
        state: present
      register: nvidia_install

    - name: Install CUDA (if enabled)
      ansible.builtin.dnf:
        name:
          - cuda
          - cuda-toolkit
        state: present
      when: install_cuda
      ignore_errors: yes

    # ====== CONFIGURATION (NO CUSTOM X.ORG CONFIG) ======
    - name: Configure NVIDIA environment
      ansible.builtin.copy:
        content: |
          # NVIDIA/CUDA Environment
          export CUDA_HOME=/usr/local/cuda
          export PATH=$CUDA_HOME/bin:$PATH
          export LD_LIBRARY_PATH=$CUDA_HOME/lib64:$LD_LIBRARY_PATH
          export NUKE_LICENSE=5053@license
        dest: /etc/profile.d/nvidia.sh
        mode: '0755'

    - name: Enable nvidia-persistenced
      ansible.builtin.systemd:
        name: nvidia-persistenced
        enabled: yes
      ignore_errors: yes

    - name: Display installation result
      ansible.builtin.debug:
        msg: |
          ‚úÖ NVIDIA Installation Complete (Safe Mode)
          
          üì¶ Installed:
          ‚Ä¢ NVIDIA drivers (AlmaLinux native)
          ‚Ä¢ CUDA toolkit
          ‚Ä¢ NVIDIA Settings
          
          üîß Safety measures:
          ‚Ä¢ No custom X.Org configuration
          ‚Ä¢ Nouveau properly blacklisted
          ‚Ä¢ System ready for safe reboot
          
          üîÑ REBOOT REQUIRED to activate drivers
          
          After reboot, verify with: nvidia-smi

    - name: Reboot system to activate NVIDIA drivers
      ansible.builtin.reboot:
        reboot_timeout: 300
        msg: "Rebooting to activate NVIDIA drivers safely"
