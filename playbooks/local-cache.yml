---
- name: Setup Local Cache Disk
  hosts: all
  become: yes
  vars:
    cache_mount_point: "/mnt/Cache"

  tasks:
    - name: Install XFS tools
      ansible.builtin.dnf:
        name: xfsprogs
        state: present

    - name: Find cache disk by label
      ansible.builtin.command: blkid -L Cache
      register: cache_disk_labeled
      failed_when: false
      changed_when: false

    - name: If no labeled cache disk, find unformatted ~1TB disk
      block:
        - name: Find unformatted disks between 900GB and 1100GB
          ansible.builtin.shell: |
            lsblk -ndo NAME,SIZE,TYPE,FSTYPE -b | \
            awk '$3=="disk" && $4=="" && $2>=900000000000 && $2<=1100000000000 {print $1}'
          register: potential_cache_disks_raw
          changed_when: false

        - name: Set potential cache disks fact
          ansible.builtin.set_fact:
            potential_cache_disks: "{{ potential_cache_disks_raw.stdout_lines }}"
          when: potential_cache_disks_raw.stdout_lines | length > 0

        - name: Display potential cache disks
          ansible.builtin.debug:
            msg: "Found potential unformatted cache disk(s): {{ potential_cache_disks }}"
          when: potential_cache_disks is defined and potential_cache_disks | length > 0

        - name: Prompt for confirmation to format disk
          ansible.builtin.pause:
            prompt: |
              Host: {{ inventory_hostname }}
              Found unformatted disk(s) around 1TB: {{ potential_cache_disks | join(', ') }}
              
              Do you want to format /dev/{{ potential_cache_disks[0] }} as Cache? (yes/no)
          register: format_confirmation
          when: potential_cache_disks is defined and potential_cache_disks | length > 0

        - name: Set cache device to format
          ansible.builtin.set_fact:
            cache_device: "/dev/{{ potential_cache_disks[0] }}"
          when: 
            - potential_cache_disks is defined
            - potential_cache_disks | length > 0
            - format_confirmation is defined
            - format_confirmation.user_input is defined
            - format_confirmation.user_input | lower == 'yes'

        - name: Check if cache device is mounted
          ansible.builtin.shell: "mount | grep {{ cache_device }}"
          register: device_mounted
          failed_when: false
          changed_when: false
          when: cache_device is defined

        - name: Unmount cache device if mounted
          ansible.builtin.command: "umount {{ cache_device }}"
          failed_when: false
          when: 
            - cache_device is defined
            - device_mounted is defined
            - device_mounted.rc == 0

        - name: Format disk as XFS with label Cache
          ansible.builtin.filesystem:
            fstype: xfs
            dev: "{{ cache_device }}"
            opts: -L Cache
            force: yes
          when: cache_device is defined

        - name: Refresh cache disk label
          ansible.builtin.command: blkid -L Cache
          register: cache_disk_labeled
          changed_when: false
          when: cache_device is defined

      when: cache_disk_labeled.rc != 0

    - name: Set cache disk path
      ansible.builtin.set_fact:
        cache_disk_path: "{{ cache_disk_labeled.stdout }}"
      when: 
        - cache_disk_labeled is defined
        - cache_disk_labeled.rc is defined
        - cache_disk_labeled.rc == 0

    - name: Display cache disk found
      ansible.builtin.debug:
        msg: "Cache disk found: {{ cache_disk_path }}"
      when: cache_disk_path is defined

    - name: Create cache mount point
      ansible.builtin.file:
        path: "{{ cache_mount_point }}"
        state: directory
        mode: '0777'
      when: cache_disk_path is defined

    - name: Get UUID of cache disk
      ansible.builtin.command: "blkid -s UUID -o value {{ cache_disk_path }}"
      register: cache_uuid
      changed_when: false
      when: cache_disk_path is defined

    - name: Add cache disk to fstab
      ansible.builtin.mount:
        path: "{{ cache_mount_point }}"
        src: "UUID={{ cache_uuid.stdout }}"
        fstype: xfs
        opts: defaults,noatime
        state: present
        backup: yes
      when: cache_disk_path is defined and cache_uuid.stdout != ""

    - name: Mount cache disk
      ansible.builtin.mount:
        path: "{{ cache_mount_point }}"
        src: "UUID={{ cache_uuid.stdout }}"
        fstype: xfs
        opts: defaults,noatime
        state: mounted
      when: cache_disk_path is defined and cache_uuid.stdout != ""

    - name: Verify cache disk is mounted
      ansible.builtin.command: "df -h {{ cache_mount_point }}"
      register: cache_verify
      changed_when: false
      failed_when: false

    - name: Display mount verification
      ansible.builtin.debug:
        msg: "{{ cache_verify.stdout_lines }}"
      when: cache_verify.rc == 0

    - name: Add Cache bookmark for all users (PAM script)
      ansible.builtin.copy:
        content: |
          #!/bin/bash
          # Add Cache bookmark to GNOME Files
          
          USER_HOME=$(eval echo ~$PAM_USER)
          BOOKMARKS_FILE="$USER_HOME/.config/gtk-3.0/bookmarks"
          
          # Ensure directory exists
          mkdir -p "$USER_HOME/.config/gtk-3.0"
          
          # Add Cache bookmark
          BOOKMARK="file://{{ cache_mount_point }} Cache"
          if ! grep -Fxq "$BOOKMARK" "$BOOKMARKS_FILE" 2>/dev/null; then
              echo "$BOOKMARK" >> "$BOOKMARKS_FILE"
          fi
          
          # Fix ownership
          USER_UID=$(id -u "$PAM_USER")
          USER_GID=$(id -g "$PAM_USER")
          chown "$USER_UID:$USER_GID" "$BOOKMARKS_FILE" 2>/dev/null || true
          chmod 644 "$BOOKMARKS_FILE" 2>/dev/null || true
          
          exit 0
        dest: /usr/share/libpam-script/pam_script_cache_bookmark.sh
        mode: '0755'

    - name: Add cache bookmark script to main PAM script
      ansible.builtin.lineinfile:
        path: /usr/share/libpam-script/pam_script_ses_open
        line: "/usr/share/libpam-script/pam_script_cache_bookmark.sh"
        insertbefore: "^exit 0"
        state: present
        backup: yes
      when: ansible_facts['os_family'] == "RedHat"
