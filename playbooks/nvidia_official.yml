---
# NVIDIA Official Repository - Fix Login Loop & Black Screen
# Uses NVIDIA's proprietary driver instead of AlmaLinux's open-source version
- name: NVIDIA Official Driver Installation (Login Loop Fix)
  hosts: all
  become: yes
  gather_facts: yes
  
  vars:
    install_cuda: true
    # Driver version options: latest, 550, 535, latest-dkms
    nvidia_driver_stream: "latest"
    
  tasks:
    - name: Display installation strategy
      ansible.builtin.debug:
        msg: |
          üîß NVIDIA Official Repository Installation
          
          Target: {{ inventory_hostname }}
          
          üÜï WHAT'S DIFFERENT:
          ‚Ä¢ Using NVIDIA's official proprietary driver
          ‚Ä¢ NOT using AlmaLinux's open-source driver
          ‚Ä¢ Direct from NVIDIA repository
          
          ‚úÖ All our fixes included:
          ‚Ä¢ Wayland disabled (X11 forced)
          ‚Ä¢ GNOME session packages
          ‚Ä¢ Nouveau completely blacklisted
          ‚Ä¢ Proper kernel module building
          
          This should fix login loop and black screen!

    - name: Check for NVIDIA GPU
      ansible.builtin.shell: lspci | grep -i nvidia
      register: nvidia_hardware
      failed_when: false
      changed_when: false

    - name: Fail if no NVIDIA hardware
      ansible.builtin.fail:
        msg: "‚ùå No NVIDIA hardware detected"
      when: nvidia_hardware.stdout == ""

    - name: Display detected GPU
      ansible.builtin.debug:
        msg: "GPU detected: {{ nvidia_hardware.stdout }}"

    # ====== CLEAN UP ANY EXISTING NVIDIA PACKAGES ======
    - name: Remove any existing NVIDIA packages (clean slate)
      ansible.builtin.dnf:
        name:
          - "nvidia*"
          - "cuda*"
        state: absent
      ignore_errors: yes

    - name: Remove old kernel modules
      ansible.builtin.command: dracut --force --regenerate-all
      changed_when: true
      ignore_errors: yes

    # ====== REPOSITORY SETUP ======
    - name: Enable CRB repository
      ansible.builtin.command: dnf config-manager --set-enabled crb
      changed_when: true

    - name: Install EPEL repository
      ansible.builtin.dnf:
        name: epel-release
        state: present

    - name: Update system completely
      ansible.builtin.dnf:
        name: "*"
        state: latest

    - name: Get current kernel version
      ansible.builtin.command: uname -r
      register: kernel_version
      changed_when: false

    - name: Display kernel version
      ansible.builtin.debug:
        msg: "Running kernel: {{ kernel_version.stdout }}"

    # ====== COMPREHENSIVE NOUVEAU BLACKLISTING ======
    - name: Blacklist nouveau in modprobe.d
      ansible.builtin.copy:
        content: |
          blacklist nouveau
          options nouveau modeset=0
        dest: /etc/modprobe.d/blacklist-nouveau.conf
        mode: '0644'

    - name: Blacklist nouveau in dracut
      ansible.builtin.copy:
        content: |
          omit_drivers+=" nouveau "
          force_drivers+=" nvidia nvidia_drm nvidia_modeset nvidia_uvm "
        dest: /etc/dracut.conf.d/nvidia.conf
        mode: '0644'

    - name: Check if GRUB uses BIOS or UEFI
      ansible.builtin.stat:
        path: /sys/firmware/efi
      register: efi_check

    - name: Add nouveau blacklist to GRUB cmdline
      ansible.builtin.lineinfile:
        path: /etc/default/grub
        regexp: '^GRUB_CMDLINE_LINUX="(.*)"'
        line: 'GRUB_CMDLINE_LINUX="\1 modprobe.blacklist=nouveau rd.driver.blacklist=nouveau nvidia-drm.modeset=1"'
        backrefs: yes
      register: grub_config

    - name: Update GRUB config (BIOS)
      ansible.builtin.command: grub2-mkconfig -o /boot/grub2/grub.cfg
      when: not efi_check.stat.exists
      changed_when: true

    - name: Update GRUB config (UEFI)
      ansible.builtin.command: grub2-mkconfig -o /boot/efi/EFI/almalinux/grub.cfg
      when: efi_check.stat.exists
      changed_when: true

    - name: Regenerate initramfs without nouveau
      ansible.builtin.command: dracut --force --omit-drivers nouveau
      changed_when: true

    # ====== INSTALL KERNEL DEPENDENCIES ======
    - name: Install kernel development packages
      ansible.builtin.dnf:
        name:
          - kernel-devel
          - "kernel-devel-{{ kernel_version.stdout }}"
          - kernel-headers
          - gcc
          - make
          - dkms
          - elfutils-libelf-devel
          - libglvnd-devel
          - libglvnd-opengl
          - libglvnd-glx
          - pkg-config
        state: present

    # ====== ADD NVIDIA OFFICIAL REPOSITORY ======
    - name: Add NVIDIA CUDA/Driver repository for RHEL 9
      ansible.builtin.yum_repository:
        name: cuda-rhel9-x86_64
        description: NVIDIA CUDA Repository for RHEL 9
        baseurl: https://developer.download.nvidia.com/compute/cuda/repos/rhel9/x86_64/
        enabled: yes
        gpgcheck: yes
        gpgkey: https://developer.download.nvidia.com/compute/cuda/repos/rhel9/x86_64/D42D0685.pub

    - name: Clean dnf cache
      ansible.builtin.command: dnf clean all
      changed_when: true

    - name: Make dnf cache
      ansible.builtin.command: dnf makecache
      changed_when: true

    # ====== INSTALL NVIDIA DRIVER (OFFICIAL NVIDIA METHOD) ======
    - name: Check available NVIDIA driver module streams
      ansible.builtin.command: dnf module list nvidia-driver
      register: available_streams
      changed_when: false

    - name: Display available driver streams
      ansible.builtin.debug:
        msg: "{{ available_streams.stdout_lines }}"

    - name: Install NVIDIA driver via module stream
      ansible.builtin.shell: |
        dnf module reset nvidia-driver -y
        dnf module install -y nvidia-driver:{{ nvidia_driver_stream }}
      register: nvidia_module_install
      changed_when: true

    - name: Display installation output
      ansible.builtin.debug:
        msg: "{{ nvidia_module_install.stdout_lines }}"

    # ====== VERIFY NVIDIA PACKAGES INSTALLED ======
    - name: List installed NVIDIA packages
      ansible.builtin.command: rpm -qa | grep nvidia
      register: nvidia_packages
      changed_when: false

    - name: Display installed packages
      ansible.builtin.debug:
        msg: "{{ nvidia_packages.stdout_lines }}"

    # ====== INSTALL CUDA TOOLKIT (OPTIONAL) ======
    - name: Install CUDA toolkit
      ansible.builtin.dnf:
        name:
          - cuda-toolkit
        state: present
      when: install_cuda
      ignore_errors: yes

    # ====== BUILD/LOAD KERNEL MODULES ======
    - name: Check if DKMS modules need building
      ansible.builtin.command: dkms status
      register: dkms_status
      changed_when: false
      failed_when: false

    - name: Display DKMS status
      ansible.builtin.debug:
        msg: "{{ dkms_status.stdout_lines }}"

    - name: Build DKMS modules if needed
      ansible.builtin.command: dkms autoinstall -k {{ kernel_version.stdout }}
      when: "'nvidia' in dkms_status.stdout"
      register: dkms_build
      changed_when: true
      failed_when: false

    - name: Regenerate initramfs with NVIDIA modules
      ansible.builtin.command: dracut --force
      changed_when: true

    # ====== FIX GDM/WAYLAND (CRITICAL FOR LOGIN LOOP) ======
    - name: Check if GDM is installed
      ansible.builtin.command: rpm -q gdm
      register: gdm_check
      failed_when: false
      changed_when: false

    - name: Create GDM config directory
      ansible.builtin.file:
        path: /etc/gdm
        state: directory
        mode: '0755'

    - name: Create GDM custom.conf if it doesn't exist
      ansible.builtin.copy:
        content: |
          [daemon]
          WaylandEnable=false
          
          [security]
          
          [xdmcp]
          
          [chooser]
          
          [debug]
        dest: /etc/gdm/custom.conf
        mode: '0644'
        force: no

    - name: Disable Wayland in GDM (FORCE X11)
      ansible.builtin.lineinfile:
        path: /etc/gdm/custom.conf
        regexp: '^#?WaylandEnable='
        line: 'WaylandEnable=false'
        insertafter: '^\[daemon\]'
        state: present

    - name: Verify GDM configuration
      ansible.builtin.command: cat /etc/gdm/custom.conf
      register: gdm_config_check
      changed_when: false

    - name: Display GDM configuration
      ansible.builtin.debug:
        msg: "{{ gdm_config_check.stdout_lines }}"

    # ====== INSTALL COMPLETE GNOME PACKAGES (PREVENT SESSION ISSUES) ======
    - name: Install full GNOME desktop environment
      ansible.builtin.dnf:
        name:
          - gdm
          - gnome-shell
          - gnome-session
          - gnome-session-xsession
          - gnome-session-wayland-session
          - gnome-terminal
          - gnome-control-center
          - gnome-classic-session
        state: present

    # ====== X11 DEPENDENCIES ======
    - name: Install X11 packages
      ansible.builtin.dnf:
        name:
          - xorg-x11-server-Xorg
          - xorg-x11-xinit
          - xorg-x11-utils
          - xorg-x11-xauth
          - xorg-x11-drv-nvidia
          - mesa-libGL
          - mesa-libEGL
          - mesa-dri-drivers
          - libglvnd
          - libglvnd-glx
          - libglvnd-egl
          - libglvnd-opengl
          - vulkan
        state: present
      ignore_errors: yes

    # ====== NVIDIA CONFIGURATION ======
    - name: Create NVIDIA Xorg configuration
      ansible.builtin.copy:
        content: |
          Section "OutputClass"
              Identifier "nvidia"
              MatchDriver "nvidia-drm"
              Driver "nvidia"
              Option "AllowEmptyInitialConfiguration"
              Option "PrimaryGPU" "yes"
              ModulePath "/usr/lib64/nvidia/xorg"
              ModulePath "/usr/lib64/xorg/modules"
          EndSection
        dest: /etc/X11/xorg.conf.d/10-nvidia.conf
        mode: '0644'

    - name: Configure NVIDIA environment variables
      ansible.builtin.copy:
        content: |
          # NVIDIA Driver Configuration
          export __GLX_VENDOR_LIBRARY_NAME=nvidia
          export __GL_SHADER_DISK_CACHE_PATH=/tmp
          export __GL_THREADED_OPTIMIZATIONS=1
          
          # CUDA Configuration
          export CUDA_HOME=/usr/local/cuda
          export PATH=$CUDA_HOME/bin:$PATH
          export LD_LIBRARY_PATH=$CUDA_HOME/lib64:$LD_LIBRARY_PATH
        dest: /etc/profile.d/nvidia.sh
        mode: '0755'

    - name: Enable nvidia-persistenced service
      ansible.builtin.systemd:
        name: nvidia-persistenced
        enabled: yes
      ignore_errors: yes

    # ====== FIX PERMISSIONS (PREVENT LOGIN ISSUES) ======
    - name: Ensure /tmp has correct permissions
      ansible.builtin.file:
        path: /tmp
        mode: '1777'
        state: directory

    - name: Create nvidia device nodes directory
      ansible.builtin.file:
        path: /dev/nvidia
        state: directory
        mode: '0755'
      ignore_errors: yes

    # ====== SET GRAPHICAL TARGET ======
    - name: Set default target to graphical
      ansible.builtin.command: systemctl set-default graphical.target
      changed_when: true

    - name: Enable GDM service
      ansible.builtin.systemd:
        name: gdm
        enabled: yes

    # ====== FINAL VERIFICATION BEFORE REBOOT ======
    - name: Verify nouveau is NOT loaded
      ansible.builtin.command: lsmod | grep nouveau
      register: nouveau_check
      failed_when: nouveau_check.rc == 0
      changed_when: false
      ignore_errors: yes

    - name: Display nouveau check
      ansible.builtin.debug:
        msg: "‚úÖ Nouveau is NOT loaded (good!)"
      when: nouveau_check.rc != 0

    - name: Check NVIDIA packages installed
      ansible.builtin.command: rpm -qa | grep nvidia | wc -l
      register: nvidia_count
      changed_when: false

    - name: Display package count
      ansible.builtin.debug:
        msg: "NVIDIA packages installed: {{ nvidia_count.stdout }}"

    # ====== FINAL STATUS ======
    - name: Display pre-reboot summary
      ansible.builtin.debug:
        msg: |
          ‚úÖ NVIDIA Official Driver Installation Complete
          
          üì¶ What was installed:
          ‚Ä¢ NVIDIA proprietary driver (from NVIDIA official repo)
          ‚Ä¢ Complete GNOME desktop environment
          ‚Ä¢ X11 packages and dependencies
          ‚Ä¢ CUDA toolkit (if enabled)
          
          üîß Fixes applied:
          ‚Ä¢ Nouveau blacklisted in 3 locations
          ‚Ä¢ Wayland DISABLED (X11 forced)
          ‚Ä¢ GDM configured for X11 only
          ‚Ä¢ NVIDIA Xorg config created
          ‚Ä¢ All kernel modules configured
          
          üéØ This should fix:
          ‚Ä¢ Login loop issues
          ‚Ä¢ Black screen after login
          ‚Ä¢ Session registration failures
          
          üîÑ Rebooting now...

    - name: Reboot system to activate NVIDIA drivers
      ansible.builtin.reboot:
        reboot_timeout: 300
        msg: "Rebooting to activate NVIDIA official drivers"

    # ====== POST-REBOOT VERIFICATION ======
    - name: Wait for system to come back online
      ansible.builtin.wait_for_connection:
        delay: 30
        timeout: 300

    - name: Check if NVIDIA kernel modules loaded
      ansible.builtin.shell: lsmod | grep nvidia
      register: nvidia_modules
      changed_when: false
      failed_when: false

    - name: Display loaded modules
      ansible.builtin.debug:
        msg: "{{ nvidia_modules.stdout_lines }}"
      when: nvidia_modules.rc == 0

    - name: Test nvidia-smi
      ansible.builtin.command: nvidia-smi
      register: nvidia_smi
      changed_when: false
      failed_when: false

    - name: Display nvidia-smi output
      ansible.builtin.debug:
        msg: "{{ nvidia_smi.stdout_lines }}"
      when: nvidia_smi.rc == 0

    - name: Check GDM status
      ansible.builtin.command: systemctl status gdm
      register: gdm_status
      changed_when: false
      failed_when: false

    - name: Check if X11 is being used
      ansible.builtin.shell: echo $XDG_SESSION_TYPE
      register: session_type
      changed_when: false
      become: no
      failed_when: false

    - name: Final success message
      ansible.builtin.debug:
        msg: |
          üéâ INSTALLATION VERIFICATION
          
          ‚úÖ System rebooted successfully
          {% if nvidia_modules.rc == 0 %}
          ‚úÖ NVIDIA modules loaded: {{ nvidia_modules.stdout_lines | length }} modules
          {% else %}
          ‚ùå NVIDIA modules NOT loaded - check logs
          {% endif %}
          
          {% if nvidia_smi.rc == 0 %}
          ‚úÖ nvidia-smi is working!
          {% else %}
          ‚ùå nvidia-smi failed - driver may not be loaded
          {% endif %}
          
          üìã Next steps:
          1. Try logging in via GUI
          2. If login loop: Check journalctl -u gdm
          3. If black screen: Check /var/log/Xorg.0.log
          4. Verify with: nvidia-smi
          
          üîç Troubleshooting commands:
          ‚Ä¢ lsmod | grep nvidia
          ‚Ä¢ systemctl status gdm
          ‚Ä¢ cat /var/log/Xorg.0.log | grep -i error
          ‚Ä¢ journalctl -u gdm -n 50
