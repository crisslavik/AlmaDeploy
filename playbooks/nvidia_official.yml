---
# NVIDIA Official Repository - Complete Installation & Verification
- name: NVIDIA Official Driver Installation with Verification
  hosts: all
  become: yes
  gather_facts: yes
  
  vars:
    install_cuda: true
    nvidia_driver_stream: "latest"
    
  tasks:
    - name: Display installation strategy
      ansible.builtin.debug:
        msg: |
          🔧 NVIDIA Official Repository Installation
          Target: {{ inventory_hostname }}
          Using NVIDIA's official proprietary driver

    - name: Check for NVIDIA GPU
      ansible.builtin.shell: lspci | grep -i nvidia
      register: nvidia_hardware
      failed_when: false
      changed_when: false

    - name: Fail if no NVIDIA hardware
      ansible.builtin.fail:
        msg: "❌ No NVIDIA hardware detected"
      when: nvidia_hardware.stdout == ""

    # ====== CLEAN UP ======
    - name: Remove any existing NVIDIA packages
      ansible.builtin.dnf:
        name:
          - "nvidia*"
          - "cuda*"
        state: absent
      ignore_errors: yes

    # ====== REPOSITORY SETUP ======
    - name: Enable CRB repository
      ansible.builtin.command: dnf config-manager --set-enabled crb
      changed_when: true

    - name: Install EPEL repository
      ansible.builtin.dnf:
        name: epel-release
        state: present

    - name: Update system completely
      ansible.builtin.dnf:
        name: "*"
        state: latest

    - name: Get current kernel version
      ansible.builtin.command: uname -r
      register: kernel_version
      changed_when: false

    # ====== BLACKLIST NOUVEAU ======
    - name: Blacklist nouveau in modprobe.d
      ansible.builtin.copy:
        content: |
          blacklist nouveau
          options nouveau modeset=0
        dest: /etc/modprobe.d/blacklist-nouveau.conf
        mode: '0644'

    - name: Blacklist nouveau in dracut
      ansible.builtin.copy:
        content: |
          omit_drivers+=" nouveau "
          force_drivers+=" nvidia nvidia_drm nvidia_modeset nvidia_uvm "
        dest: /etc/dracut.conf.d/nvidia.conf
        mode: '0644'

    - name: Add nouveau blacklist to GRUB cmdline
      ansible.builtin.lineinfile:
        path: /etc/default/grub
        regexp: '^GRUB_CMDLINE_LINUX="(.*)"'
        line: 'GRUB_CMDLINE_LINUX="\1 modprobe.blacklist=nouveau rd.driver.blacklist=nouveau nvidia-drm.modeset=1"'
        backrefs: yes
      register: grub_config

    - name: Update GRUB configuration
      ansible.builtin.command: grub2-mkconfig -o /boot/grub2/grub.cfg
      when: grub_config.changed
      changed_when: true

    - name: Regenerate initramfs without nouveau
      ansible.builtin.command: dracut --force --omit-drivers nouveau
      changed_when: true

    # ====== INSTALL DEPENDENCIES ======
    - name: Install kernel development packages
      ansible.builtin.dnf:
        name:
          - kernel-devel
          - "kernel-devel-{{ kernel_version.stdout }}"
          - kernel-headers
          - gcc
          - make
          - dkms
          - elfutils-libelf-devel
          - libglvnd-devel
          - libglvnd-opengl
          - libglvnd-glx
          - pkg-config
        state: present

    # ====== ADD NVIDIA OFFICIAL REPOSITORY ======
    - name: Add NVIDIA CUDA/Driver repository
      ansible.builtin.yum_repository:
        name: cuda-rhel9-x86_64
        description: NVIDIA CUDA Repository for RHEL 9
        baseurl: https://developer.download.nvidia.com/compute/cuda/repos/rhel9/x86_64/
        enabled: yes
        gpgcheck: yes
        gpgkey: https://developer.download.nvidia.com/compute/cuda/repos/rhel9/x86_64/D42D0685.pub

    - name: Clean and update dnf cache
      ansible.builtin.command: dnf clean all && dnf makecache
      changed_when: true

    # ====== INSTALL NVIDIA DRIVER ======
    - name: Install NVIDIA driver via module stream
      ansible.builtin.shell: |
        dnf module reset nvidia-driver -y
        dnf module install -y nvidia-driver:{{ nvidia_driver_stream }}
      register: nvidia_module_install
      changed_when: true

    - name: Display installation result
      ansible.builtin.debug:
        msg: "{{ nvidia_module_install.stdout_lines }}"

    # ====== INSTALL CUDA (OPTIONAL) ======
    - name: Install CUDA toolkit
      ansible.builtin.dnf:
        name: cuda-toolkit
        state: present
      when: install_cuda
      ignore_errors: yes

    # ====== BUILD KERNEL MODULES ======
    - name: Build DKMS modules
      ansible.builtin.command: dkms autoinstall -k {{ kernel_version.stdout }}
      register: dkms_build
      changed_when: true
      failed_when: false

    - name: Regenerate initramfs with NVIDIA modules
      ansible.builtin.command: dracut --force
      changed_when: true

    # ====== FIX GDM/WAYLAND ======
    - name: Create GDM config directory
      ansible.builtin.file:
        path: /etc/gdm
        state: directory
        mode: '0755'

    - name: Create GDM custom.conf
      ansible.builtin.copy:
        content: |
          [daemon]
          WaylandEnable=false
        dest: /etc/gdm/custom.conf
        mode: '0644'

    # ====== INSTALL GNOME PACKAGES ======
    - name: Install GNOME desktop packages
      ansible.builtin.dnf:
        name:
          - gdm
          - gnome-shell
          - gnome-session
          - gnome-session-xsession
          - gnome-terminal
        state: present

    # ====== X11 PACKAGES ======
    - name: Install X11 packages
      ansible.builtin.dnf:
        name:
          - xorg-x11-server-Xorg
          - xorg-x11-xinit
          - xorg-x11-utils
          - mesa-libGL
          - mesa-libEGL
          - libglvnd
          - libglvnd-glx
          - libglvnd-egl
        state: present

    # ====== NVIDIA CONFIGURATION ======
    - name: Create Xorg NVIDIA config directory
      ansible.builtin.file:
        path: /etc/X11/xorg.conf.d
        state: directory
        mode: '0755'

    - name: Create NVIDIA Xorg configuration
      ansible.builtin.copy:
        content: |
          Section "OutputClass"
              Identifier "nvidia"
              MatchDriver "nvidia-drm"
              Driver "nvidia"
              Option "AllowEmptyInitialConfiguration"
              ModulePath "/usr/lib64/nvidia/xorg"
              ModulePath "/usr/lib64/xorg/modules"
          EndSection
        dest: /etc/X11/xorg.conf.d/10-nvidia.conf
        mode: '0644'

    - name: Configure NVIDIA environment
      ansible.builtin.copy:
        content: |
          export __GLX_VENDOR_LIBRARY_NAME=nvidia
          export CUDA_HOME=/usr/local/cuda
          export PATH=$CUDA_HOME/bin:$PATH
          export LD_LIBRARY_PATH=$CUDA_HOME/lib64:$LD_LIBRARY_PATH
        dest: /etc/profile.d/nvidia.sh
        mode: '0755'

    - name: Enable nvidia-persistenced
      ansible.builtin.systemd:
        name: nvidia-persistenced
        enabled: yes
      ignore_errors: yes

    # ====== FIX PERMISSIONS ======
    - name: Ensure /tmp permissions
      ansible.builtin.file:
        path: /tmp
        mode: '1777'
        state: directory

    # ====== SET GRAPHICAL TARGET ======
    - name: Set graphical target
      ansible.builtin.command: systemctl set-default graphical.target
      changed_when: true

    - name: Enable GDM
      ansible.builtin.systemd:
        name: gdm
        enabled: yes

    # ====== PRE-REBOOT STATUS ======
    - name: Display pre-reboot status
      ansible.builtin.debug:
        msg: |
          ✅ Installation complete - rebooting now
          
          After reboot, verification will run automatically

    - name: Reboot system
      ansible.builtin.reboot:
        reboot_timeout: 300
        msg: "Rebooting to activate NVIDIA drivers"

    # ====== POST-REBOOT VERIFICATION ======
    - name: Wait for system to come back
      ansible.builtin.wait_for_connection:
        delay: 30
        timeout: 300

    - name: Check NVIDIA modules loaded
      ansible.builtin.shell: lsmod | grep nvidia
      register: nvidia_modules
      changed_when: false
      failed_when: false

    - name: Test nvidia-smi
      ansible.builtin.command: nvidia-smi
      register: nvidia_smi
      changed_when: false
      failed_when: false

    - name: Check GDM status
      ansible.builtin.systemd:
        name: gdm
      register: gdm_status

    # ====== FINAL REPORT ======
    - name: Display verification results
      ansible.builtin.debug:
        msg: |
          
          ╔════════════════════════════════════════════════╗
          ║     NVIDIA INSTALLATION VERIFICATION          ║
          ╚════════════════════════════════════════════════╝
          
          Host: {{ inventory_hostname }}
          
          {% if nvidia_modules.rc == 0 %}
          ✅ NVIDIA Modules: LOADED
          {{ nvidia_modules.stdout }}
          {% else %}
          ❌ NVIDIA Modules: NOT LOADED
          {% endif %}
          
          {% if nvidia_smi.rc == 0 %}
          ✅ nvidia-smi: WORKING
          
          {{ nvidia_smi.stdout }}
          {% else %}
          ❌ nvidia-smi: FAILED
          Error: {{ nvidia_smi.stderr }}
          {% endif %}
          
          {% if gdm_status.status.ActiveState == "active" %}
          ✅ GDM: RUNNING
          {% else %}
          ❌ GDM: {{ gdm_status.status.ActiveState }}
          {% endif %}
          
          ╔════════════════════════════════════════════════╗
          {% if nvidia_smi.rc == 0 %}
          ║  🎉 SUCCESS! GPU is ready                     ║
          {% else %}
          ║  ❌ FAILED - Check logs above                 ║
          {% endif %}
          ╚════════════════════════════════════════════════╝
          
          Next: Try logging in via GUI

    - name: Mark verification complete
      ansible.builtin.set_fact:
        nvidia_verified: "{{ nvidia_smi.rc == 0 }}"

    - name: Fail if nvidia-smi doesn't work
      ansible.builtin.fail:
        msg: |
          ❌ nvidia-smi verification FAILED
          
          Troubleshooting commands:
          • lsmod | grep nvidia
          • dmesg | grep -i nvidia
          • journalctl -xe | grep nvidia
          • cat /var/log/Xorg.0.log
      when: nvidia_smi.rc != 0
