---
- name: Install Thinkbox Deadline 10.4.2.2 Client
  hosts: all
  become: yes
  vars:
    deadline_version: "10.4.2.2"
    deadline_installer: "DeadlineClient-{{ deadline_version }}-linux-x64-installer.run"
    deadline_install_path: "/opt/Thinkbox/Deadline10"
    deadline_repo_path: "/mnt/Library/_deadlinerepo/repository"
    rcs_server: "192.168.11.16"
    rcs_port: "4433"
    client_cert_path: "/mnt/Library/_deadlinerepo/certs/Deadline10RemoteClient.pfx"
    client_cert_password: "N0Xdeadline"
    ad_home_base: "/home/ad.noxvfx.com"
    render_user: "render"
    
  tasks:
    # STEP 1: Install Dependencies
    - name: Enable EPEL repository
      ansible.builtin.dnf:
        name:
          - epel-release
        state: present
      tags: dependencies

    - name: Enable CRB (CodeReady Builder) repository
      ansible.builtin.command:
        cmd: dnf config-manager --set-enabled crb
      args:
        creates: /etc/yum.repos.d/crb.repo
      tags: dependencies

    - name: Install required dependencies for Deadline Client
      ansible.builtin.dnf:
        name:
          - libX11
          - libXext
          - mesa-libGL
          - mesa-libGLU
          - nfs-utils
          - libxcrypt-compat
          - ncurses-compat-libs
        state: present
      tags: dependencies

    # STEP 2: Repository and Installer Setup
    - name: Check if repository is already mounted or accessible
      ansible.builtin.stat:
        path: "{{ deadline_repo_path }}"
      register: repo_check
      tags: repository

    - name: Verify repository is accessible
      ansible.builtin.command: ls {{ deadline_repo_path }}
      register: repo_access
      failed_when: repo_access.rc != 0
      changed_when: false
      tags: repository

    - name: Display repository status
      ansible.builtin.debug:
        msg: "Repository at {{ deadline_repo_path }} is accessible"
      tags: repository

    - name: Create temporary directory for installer
      ansible.builtin.file:
        path: /tmp/deadline_install
        state: directory
        mode: '0755'
      tags: installer

    - name: Copy Deadline installer to target
      ansible.builtin.copy:
        src: "../../files/{{ deadline_installer }}"
        dest: "/tmp/deadline_install/{{ deadline_installer }}"
        mode: '0755'
      tags: installer

    - name: Verify client certificate exists on repository
      ansible.builtin.stat:
        path: "{{ client_cert_path }}"
      register: cert_file
      failed_when: not cert_file.stat.exists
      tags: certificates

    # STEP 3: Silent Installation with Remote Control Enabled
    - name: Check if Deadline is already installed
      ansible.builtin.stat:
        path: "{{ deadline_install_path }}"
      register: deadline_installed
      tags: install

    - name: Install Deadline Client in silent mode with daemon and remote control
      ansible.builtin.command:
        cmd: >
          /tmp/deadline_install/{{ deadline_installer }}
          --mode unattended
          --prefix {{ deadline_install_path }}
          --connectiontype Remote
          --proxyrootdir {{ rcs_server }}:{{ rcs_port }}
          --proxycertificate {{ client_cert_path }}
          --proxycertificatepassword {{ client_cert_password }}
          --slavestartup false
          --launcherstartup true
          --launcherdaemon true
          --daemonuser {{ render_user }}
          --blockautoupdateoverride Blocked
          --remotecontrol NotBlocked
          --installer-language en
      args:
        creates: "{{ deadline_install_path }}/bin/deadlinecommand"
      when: not deadline_installed.stat.exists
      tags: install
      register: install_result

    - name: Display installation result
      ansible.builtin.debug:
        var: install_result
      when: install_result.changed
      tags: install

    # STEP 4: Configure Firewall
    - name: Open Deadline Launcher port 17000 in firewall
      ansible.builtin.firewalld:
        port: 17000/tcp
        permanent: yes
        state: enabled
      tags: firewall

    - name: Reload firewall to apply changes
      ansible.builtin.command:
        cmd: firewall-cmd --reload
      tags: firewall

    # STEP 5: Configure Render User
    - name: Check if render user home directory exists
      ansible.builtin.stat:
        path: "{{ ad_home_base }}/{{ render_user }}"
      register: render_home_check
      tags: configure_render_user

    - name: Trigger render user home directory creation
      ansible.builtin.command: su - {{ render_user }} -c "exit"
      when: not render_home_check.stat.exists
      failed_when: false
      tags: configure_render_user

    - name: Verify render user home directory was created
      ansible.builtin.stat:
        path: "{{ ad_home_base }}/{{ render_user }}"
      register: render_home_verify
      tags: configure_render_user

    - name: Create render user home directory if it still doesn't exist
      ansible.builtin.file:
        path: "{{ ad_home_base }}/{{ render_user }}"
        state: directory
        owner: "{{ render_user }}"
        group: "domain users"
        mode: '0700'
      when: not render_home_verify.stat.exists
      tags: configure_render_user

    - name: Ensure render user home directory has correct ownership
      ansible.builtin.file:
        path: "{{ ad_home_base }}/{{ render_user }}"
        state: directory
        owner: "{{ render_user }}"
        group: "domain users"
        mode: '0700'
        recurse: yes
      tags: configure_render_user

    - name: Create .deadline directory for render user
      ansible.builtin.file:
        path: "{{ ad_home_base }}/{{ render_user }}/.deadline"
        state: directory
        owner: "{{ render_user }}"
        group: "domain users"
        mode: '0755'
      tags: configure_render_user

    - name: Configure deadline.ini for render user
      ansible.builtin.copy:
        dest: "{{ ad_home_base }}/{{ render_user }}/.deadline/deadline.ini"
        owner: "{{ render_user }}"
        group: "domain users"
        mode: '0644'
        content: |
          [ConnectionType]
          Type=Remote
          [Proxy]
          Root={{ rcs_server }}:{{ rcs_port }}
          SSLCertificate={{ client_cert_path }}
          [AutoConfiguration]
          Enabled=True
        force: yes
      tags: configure_render_user

    # STEP 6: Configure for Existing AD Users (Artists)
    - name: Find all existing AD user home directories
      ansible.builtin.find:
        paths: "{{ ad_home_base }}"
        file_type: directory
        recurse: no
      register: ad_user_homes_raw
      tags: configure_users

    - name: Filter only actual user directories (UID > 400000000)
      ansible.builtin.set_fact:
        ad_user_homes:
          files: "{{ ad_user_homes_raw.files | selectattr('uid', 'gt', 400000000) | list }}"
      tags: configure_users

    - name: Create .deadline directory for existing AD users
      ansible.builtin.file:
        path: "{{ item.path }}/.deadline"
        state: directory
        owner: "{{ item.path | basename }}"
        group: "{{ item.gid }}"
        mode: '0755'
      loop: "{{ ad_user_homes.files }}"
      tags: configure_users

    - name: Configure deadline.ini for existing AD users
      ansible.builtin.copy:
        dest: "{{ item.path }}/.deadline/deadline.ini"
        owner: "{{ item.path | basename }}"
        group: "{{ item.gid }}"
        mode: '0644'
        content: |
          [ConnectionType]
          Type=Remote
          [Proxy]
          Root={{ rcs_server }}:{{ rcs_port }}
          SSLCertificate={{ client_cert_path }}
          [AutoConfiguration]
          Enabled=True
      loop: "{{ ad_user_homes.files }}"
      tags: configure_users

    # STEP 7: Configure for Future AD Users (/etc/skel/)
    - name: Create .deadline directory in /etc/skel
      ansible.builtin.file:
        path: /etc/skel/.deadline
        state: directory
        mode: '0755'
      tags: configure_skel

    - name: Configure deadline.ini in /etc/skel for future users
      ansible.builtin.copy:
        dest: /etc/skel/.deadline/deadline.ini
        mode: '0644'
        content: |
          [ConnectionType]
          Type=Remote
          [Proxy]
          Root={{ rcs_server }}:{{ rcs_port }}
          SSLCertificate={{ client_cert_path }}
          [AutoConfiguration]
          Enabled=True
      tags: configure_skel

    # STEP 8: Configure Desktop Shortcuts (System-wide and working)
    - name: Copy Deadline desktop files to system applications
      ansible.builtin.copy:
        src: "{{ deadline_install_path }}/{{ item }}"
        dest: /usr/share/applications/{{ item }}
        mode: '0644'
        remote_src: yes
      become: yes
      loop:
        - deadlinelauncher10.desktop
        - deadlinemonitor10.desktop
        - deadlineworker10.desktop
      tags: desktop_shortcuts

    - name: Fix Monitor desktop file to launch directly
      ansible.builtin.lineinfile:
        path: /usr/share/applications/deadlinemonitor10.desktop
        regexp: '^Exec='
        line: 'Exec=/opt/Thinkbox/Deadline10/bin/deadlinemonitor'
      become: yes
      tags: desktop_shortcuts

    - name: Fix Worker desktop file to launch directly
      ansible.builtin.lineinfile:
        path: /usr/share/applications/deadlineworker10.desktop
        regexp: '^Exec='
        line: 'Exec=/opt/Thinkbox/Deadline10/bin/deadlineslave'
      become: yes
      tags: desktop_shortcuts

    # STEP 9: Configure Deadline Environment
    - name: Add Deadline to system PATH
      ansible.builtin.copy:
        dest: /etc/profile.d/deadline.sh
        mode: '0644'
        content: |
          export DEADLINE_PATH={{ deadline_install_path }}
          export PATH=$PATH:{{ deadline_install_path }}/bin
      tags: environment

    - name: Verify Deadline installation
      ansible.builtin.command: "{{ deadline_install_path }}/bin/deadlinecommand --version"
      register: deadline_version_check
      changed_when: false
      tags: verify

    - name: Display Deadline version
      ansible.builtin.debug:
        msg: "Deadline installed successfully: {{ deadline_version_check.stdout }}"
      tags: verify

    # STEP 10: Cleanup
    - name: Remove temporary installer files
      ansible.builtin.file:
        path: /tmp/deadline_install
        state: absent
      tags: cleanup

    - name: Installation complete message
      ansible.builtin.debug:
        msg: |
          Deadline {{ deadline_version }} installation completed successfully!
          
          CONFIGURATION:
          - Installation path: {{ deadline_install_path }}
          - Repository: {{ deadline_repo_path }}
          - RCS Server: {{ rcs_server }}:{{ rcs_port }}
          - Daemon user: {{ render_user }}
          
          FEATURES:
          - Launcher daemon auto-starts on boot as 'render' user
          - Worker does NOT auto-start (remotely controlled)
          - Remote Control: ENABLED (Monitor can start/stop workers)
          - Firewall: Port 17000 opened for remote control
          - Auto-upgrade: BLOCKED for security
          
          USERS:
          - Configured for existing AD users in {{ ad_home_base }}
          - Configured for future users via /etc/skel
          - Desktop shortcuts added (Launcher, Monitor, Worker)
          
          USAGE:
          - Open Deadline Monitor from Applications menu
          - Right-click workers in Monitor → Start Worker / Stop Worker
          - Workers will render as 'render' user with access to shared storage
          
          NEXT STEPS:
          - Test starting a worker from Deadline Monitor
          - Submit a test job to verify rendering works
          - Configure worker groups and pools as needed
      tags: always
