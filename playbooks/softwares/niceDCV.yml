---
- name: NICE DCV Server Complete Installation
  hosts: all
  become: yes
  
  vars:
    dcv_license_server: "5053@license"
    ad_domain: "ad.noxvfx.com"
    ad_home_base: "/home/ad.noxvfx.com"
  
  tasks:
    # STEP 1: Install Prerequisites and Dependencies
    - name: Install EPEL repository
      ansible.builtin.yum:
        name: https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm
        state: present
        disable_gpg_check: yes

    - name: Install X server and desktop environment packages
      ansible.builtin.yum:
        name:
          - '@base-x'
          - '@gnome-desktop'
          - gdm
          - glx-utils
          - mesa-libGLU
          - pulseaudio-utils
          - xorg-x11-server-Xorg
          - xorg-x11-utils
          - xorg-x11-xinit
        state: present

    - name: Install DKMS for USB driver support
      ansible.builtin.yum:
        name: dkms
        state: present

    # STEP 2: Copy RPM Files
    - name: Create temporary directory for DCV packages
      ansible.builtin.file:
        path: /tmp/nice-dcv-packages
        state: directory
        mode: '0755'

    - name: Copy all NICE DCV RPM files
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: /tmp/nice-dcv-packages/
        mode: '0644'
      loop:
        - ../../files/nice-dcv/nice-dcv-gl-2024.0.1096-1.el9.x86_64.rpm
        - ../../files/nice-dcv/nice-dcv-gltest-2024.0.352-1.el9.x86_64.rpm
        - ../../files/nice-dcv/nice-dcv-server-2024.0.19030-1.el9.x86_64.rpm
        - ../../files/nice-dcv/nice-dcv-simple-external-authenticator-2024.0.266-1.el9.x86_64.rpm
        - ../../files/nice-dcv/nice-dcv-web-viewer-2024.0.19030-1.el9.x86_64.rpm
        - ../../files/nice-dcv/nice-xdcv-2024.0.654-1.el9.x86_64.rpm

    - name: Verify all RPM files were copied
      ansible.builtin.stat:
        path: "/tmp/nice-dcv-packages/{{ item }}"
      loop:
        - nice-dcv-gl-2024.0.1096-1.el9.x86_64.rpm
        - nice-dcv-gltest-2024.0.352-1.el9.x86_64.rpm
        - nice-dcv-server-2024.0.19030-1.el9.x86_64.rpm
        - nice-dcv-simple-external-authenticator-2024.0.266-1.el9.x86_64.rpm
        - nice-dcv-web-viewer-2024.0.19030-1.el9.x86_64.rpm
        - nice-xdcv-2024.0.654-1.el9.x86_64.rpm
      register: rpm_files

    - name: Display verification results
      ansible.builtin.debug:
        msg: "All RPM files copied successfully"
      when: rpm_files.results | map(attribute='stat.exists') | select('equalto', true) | list | length == 6

    # STEP 3: Install DCV Packages
    - name: Import NICE GPG key
      ansible.builtin.rpm_key:
        state: present
        key: https://d1uj6qtbmh3dt5.cloudfront.net/NICE-GPG-KEY

    - name: Install NICE DCV Server (main package)
      ansible.builtin.yum:
        name: /tmp/nice-dcv-packages/nice-dcv-server-2024.0.19030-1.el9.x86_64.rpm
        state: present
        disable_gpg_check: no

    - name: Install NICE DCV Web Viewer
      ansible.builtin.yum:
        name: /tmp/nice-dcv-packages/nice-dcv-web-viewer-2024.0.19030-1.el9.x86_64.rpm
        state: present
        disable_gpg_check: no

    - name: Install NICE XDCV (for virtual sessions)
      ansible.builtin.yum:
        name: /tmp/nice-dcv-packages/nice-xdcv-2024.0.654-1.el9.x86_64.rpm
        state: present
        disable_gpg_check: no

    - name: Install NICE DCV GL (GPU support)
      ansible.builtin.yum:
        name: /tmp/nice-dcv-packages/nice-dcv-gl-2024.0.1096-1.el9.x86_64.rpm
        state: present
        disable_gpg_check: no

    - name: Install NICE DCV GL Test
      ansible.builtin.yum:
        name: /tmp/nice-dcv-packages/nice-dcv-gltest-2024.0.352-1.el9.x86_64.rpm
        state: present
        disable_gpg_check: no

    - name: Install NICE DCV Simple External Authenticator
      ansible.builtin.yum:
        name: /tmp/nice-dcv-packages/nice-dcv-simple-external-authenticator-2024.0.266-1.el9.x86_64.rpm
        state: present
        disable_gpg_check: no

    # STEP 4: Configure Firewall
    - name: Ensure firewalld is installed
      ansible.builtin.yum:
        name: firewalld
        state: present

    - name: Start and enable firewalld
      ansible.builtin.systemd:
        name: firewalld
        state: started
        enabled: yes

    - name: Open DCV port 8443/tcp in firewall
      ansible.builtin.firewalld:
        port: 8443/tcp
        permanent: yes
        state: enabled
        immediate: yes

    - name: Verify firewall rule for DCV
      ansible.builtin.command:
        cmd: firewall-cmd --list-ports
      register: firewall_ports
      changed_when: false

    - name: Display firewall ports
      ansible.builtin.debug:
        msg: "Open ports: {{ firewall_ports.stdout }}"

    # STEP 5: Configure DCV Server Basic Settings
    - name: Create DCV configuration directory
      ansible.builtin.file:
        path: /etc/dcv
        state: directory
        mode: '0755'

    - name: Configure DCV server settings
      ansible.builtin.lineinfile:
        path: /etc/dcv/dcv.conf
        line: "{{ item.line }}"
        regexp: "{{ item.regexp }}"
        create: yes
        mode: '0644'
      loop:
        - { regexp: '^\[security\]', line: '[security]' }
        - { regexp: '^authentication=', line: 'authentication="system"' }
        - { regexp: '^\[display\]', line: '[display]' }
        - { regexp: '^target-fps=', line: 'target-fps=30' }
        - { regexp: '^\[display/linux\]', line: '[display/linux]' }
        - { regexp: '^gl-displays=', line: 'gl-displays=[":0.0"]' }
        - { regexp: '^use-glx-fallback-provider=', line: 'use-glx-fallback-provider=true' }
        - { regexp: '^\[session-management\]', line: '[session-management]' }
        - { regexp: '^create-session=', line: 'create-session=true' }
        - { regexp: '^\[session-management/defaults\]', line: '[session-management/defaults]' }
        - { regexp: '^permissions-file=', line: 'permissions-file="/etc/dcv/dcv_permissions.conf"' }

    # STEP 6: Configure License Server
    - name: Configure DCV license server
      ansible.builtin.lineinfile:
        path: /etc/dcv/dcv.conf
        line: "{{ item.line }}"
        regexp: "{{ item.regexp }}"
        create: yes
        mode: '0644'
      loop:
        - { regexp: '^\[license\]', line: '[license]' }
        - { regexp: '^license-file=', line: 'license-file="{{ dcv_license_server }}"' }

    # STEP 7: Configure AD Integration
    - name: Ensure PAM and SSSD are configured for AD (informational)
      ansible.builtin.debug:
        msg: "Assuming AD authentication is already configured via SSSD/Kerberos on the system"

    - name: Create DCV permissions file for AD users
      ansible.builtin.copy:
        dest: /etc/dcv/dcv_permissions.conf
        content: |
          [permissions]
          %owner% allow builtin
        mode: '0644'

    # STEP 8: Configure Automatic Session Creation
    - name: Enable automatic console session creation
      ansible.builtin.lineinfile:
        path: /etc/dcv/dcv.conf
        line: "{{ item.line }}"
        regexp: "{{ item.regexp }}"
        create: yes
        mode: '0644'
      loop:
        - { regexp: '^\[session-management/automatic-console-session\]', line: '[session-management/automatic-console-session]' }
        - { regexp: '^owner=', line: 'owner=""' }
        - { regexp: '^storage-root=', line: 'storage-root="/var/run/dcv/session-storage"' }

    - name: Create session storage directory
      ansible.builtin.file:
        path: /var/run/dcv/session-storage
        state: directory
        mode: '0755'
        owner: dcv
        group: dcv

    - name: Configure session storage permissions for AD users
      ansible.builtin.lineinfile:
        path: /etc/dcv/dcv.conf
        line: "{{ item.line }}"
        regexp: "{{ item.regexp }}"
        create: yes
        mode: '0644'
      loop:
        - { regexp: '^\[session-management/defaults\]', line: '[session-management/defaults]' }
        - { regexp: '^max-concurrent-clients=', line: 'max-concurrent-clients=-1' }

    - name: Set default display resolution
      ansible.builtin.lineinfile:
        path: /etc/dcv/dcv.conf
        line: "{{ item.line }}"
        regexp: "{{ item.regexp }}"
        create: yes
        mode: '0644'
      loop:
        - { regexp: '^console-session-default-layout=', line: 'console-session-default-layout="1920x1080"' }

    # STEP 9: Enable and Start Services
    - name: Set default target to graphical
      ansible.builtin.command:
        cmd: systemctl set-default graphical.target
      register: graphical_target
      changed_when: "'Created symlink' in graphical_target.stdout or 'Removed' in graphical_target.stdout"

    - name: Enable and start GDM (GNOME Display Manager)
      ansible.builtin.systemd:
        name: gdm
        state: started
        enabled: yes

    - name: Enable DCV server service
      ansible.builtin.systemd:
        name: dcvserver
        enabled: yes

    - name: Start DCV server service
      ansible.builtin.systemd:
        name: dcvserver
        state: started

    - name: Wait for DCV server to be ready
      ansible.builtin.wait_for:
        port: 8443
        delay: 5
        timeout: 60

    - name: Verify DCV server status
      ansible.builtin.command:
        cmd: systemctl status dcvserver
      register: dcv_status
      changed_when: false
      failed_when: false

    - name: Display DCV server status
      ansible.builtin.debug:
        msg: "{{ dcv_status.stdout_lines }}"

    # Cleanup
    - name: Remove temporary DCV packages directory
      ansible.builtin.file:
        path: /tmp/nice-dcv-packages
        state: absent

    - name: Final installation summary
      ansible.builtin.debug:
        msg:
          - "=========================================="
          - "NICE DCV Server Installation Complete!"
          - "=========================================="
          - "License Server: {{ dcv_license_server }}"
          - "DCV Port: 8443"
          - "Authentication: System (AD via SSSD)"
          - "AD Domain: {{ ad_domain }}"
          - "AD Home Path: {{ ad_home_base }}"
          - "Auto Session: Enabled"
          - "GPU Support: Enabled"
          - "Web Viewer: Enabled"
          - "=========================================="
          - "Access DCV at: https://<server-ip>:8443"
          - "=========================================="
