---
# Robust NVIDIA Installation for AlmaLinux
- name: Robust NVIDIA Driver Installation
  hosts: all
  become: yes
  gather_facts: yes
  
  vars:
    install_cuda: true
    install_nvidia_settings: true
    
  tasks:
    - name: Check for NVIDIA hardware
      ansible.builtin.shell: lspci | grep -i nvidia
      register: nvidia_hardware
      failed_when: false
      changed_when: false

    - name: Fail if no NVIDIA hardware found
      ansible.builtin.fail:
        msg: "No NVIDIA hardware detected"
      when: nvidia_hardware.stdout == ""

    - name: Display detected NVIDIA hardware
      ansible.builtin.debug:
        msg: "Found NVIDIA hardware: {{ nvidia_hardware.stdout }}"

    # ====== REPOSITORY SETUP (MULTIPLE METHODS) ======
    - name: Install EPEL repository
      ansible.builtin.dnf:
        name: epel-release
        state: present

    - name: Enable CRB repository for AlmaLinux 9
      ansible.builtin.shell: dnf config-manager --set-enabled crb
      when: ansible_distribution_major_version == "9"
      ignore_errors: yes

    - name: Enable PowerTools repository for AlmaLinux 8
      ansible.builtin.shell: dnf config-manager --set-enabled powertools
      when: ansible_distribution_major_version == "8"
      ignore_errors: yes

    - name: Remove any existing NVIDIA repositories (clean slate)
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/yum.repos.d/cuda-rhel8.repo
        - /etc/yum.repos.d/cuda-rhel9.repo
        - /etc/yum.repos.d/nvidia-driver.repo
        - /etc/yum.repos.d/nvidia-cuda.repo
      ignore_errors: yes

    - name: Add NVIDIA CUDA repository using config-manager
      ansible.builtin.shell: |
        dnf config-manager --add-repo https://developer.download.nvidia.com/compute/cuda/repos/rhel{{ ansible_distribution_major_version }}/x86_64/cuda-rhel{{ ansible_distribution_major_version }}.repo
      register: cuda_repo_add
      failed_when: false

    - name: Import NVIDIA GPG key
      ansible.builtin.rpm_key:
        key: "https://developer.download.nvidia.com/compute/cuda/repos/rhel{{ ansible_distribution_major_version }}/x86_64/D42D0685.pub"
        state: present

    - name: Update repository cache
      ansible.builtin.dnf:
        update_cache: yes

    # ====== KERNEL PACKAGES ======
    - name: Install kernel development packages
      ansible.builtin.dnf:
        name:
          - kernel-devel
          - kernel-headers
          - gcc
          - make
          - dkms
          - elfutils-libelf-devel
        state: present

    # ====== NVIDIA INSTALLATION (PROGRESSIVE APPROACH) ======
    - name: Try Method 1 - Install specific NVIDIA packages
      ansible.builtin.dnf:
        name:
          - nvidia-driver:latest-dkms
          - nvidia-driver-libs
          - nvidia-driver-cuda
          - nvidia-driver-cuda-libs
        state: present
      register: nvidia_method1
      ignore_errors: yes

    - name: Try Method 2 - Install NVIDIA drivers without specific versions
      ansible.builtin.dnf:
        name:
          - nvidia-driver
          - nvidia-driver-libs
        state: present
      register: nvidia_method2
      ignore_errors: yes
      when: nvidia_method1 is failed

    - name: Try Method 3 - Install using cuda-drivers meta-package
      ansible.builtin.dnf:
        name:
          - cuda-drivers
        state: present
      register: nvidia_method3
      ignore_errors: yes
      when: nvidia_method1 is failed and nvidia_method2 is failed

    - name: Try Method 4 - Install basic NVIDIA packages available
      ansible.builtin.shell: |
        # Find what NVIDIA packages are actually available
        AVAILABLE_PACKAGES=$(dnf list available 2>/dev/null | grep -E '^nvidia-driver|^kmod-nvidia|^akmod-nvidia' | awk '{print $1}' | head -5)
        if [ -n "$AVAILABLE_PACKAGES" ]; then
          echo "Installing: $AVAILABLE_PACKAGES"
          dnf install -y $AVAILABLE_PACKAGES
        else
          echo "No NVIDIA driver packages found"
          exit 1
        fi
      register: nvidia_method4
      ignore_errors: yes
      when: nvidia_method1 is failed and nvidia_method2 is failed and nvidia_method3 is failed

    - name: Check which method succeeded
      ansible.builtin.set_fact:
        nvidia_install_method: >-
          {% if nvidia_method1 is not failed -%}
          Method 1 (specific packages)
          {%- elif nvidia_method2 is not failed -%}
          Method 2 (basic packages)
          {%- elif nvidia_method3 is not failed -%}
          Method 3 (cuda-drivers)
          {%- elif nvidia_method4 is not failed -%}
          Method 4 (available packages)
          {%- else -%}
          None - All methods failed
          {%- endif %}

    - name: Display installation method used
      ansible.builtin.debug:
        msg: "NVIDIA installation: {{ nvidia_install_method }}"

    - name: Fail if all installation methods failed
      ansible.builtin.fail:
        msg: |
          All NVIDIA installation methods failed. 
          Please check:
          1. NVIDIA repository is accessible
          2. Package names are correct for your AlmaLinux version
          3. Hardware is supported
      when: nvidia_method1 is failed and nvidia_method2 is failed and nvidia_method3 is failed and nvidia_method4 is failed

    # ====== X.ORG DRIVER (SEPARATE ATTEMPT) ======
    - name: Try to install X.Org NVIDIA driver
      ansible.builtin.dnf:
        name:
          - xorg-x11-drv-nvidia
          - nvidia-libXNVCtrl
        state: present
      register: xorg_nvidia_install
      ignore_errors: yes

    - name: Try alternative X.Org driver packages
      ansible.builtin.shell: |
        # Look for any xorg nvidia packages
        XORG_PACKAGES=$(dnf list available 2>/dev/null | grep -E 'xorg.*nvidia|nvidia.*xorg' | awk '{print $1}')
        if [ -n "$XORG_PACKAGES" ]; then
          echo "Installing X.Org packages: $XORG_PACKAGES"
          dnf install -y $XORG_PACKAGES
        else
          echo "No X.Org NVIDIA packages found"
        fi
      register: xorg_alternative
      ignore_errors: yes
      when: xorg_nvidia_install is failed

    # ====== NVIDIA SETTINGS ======
    - name: Install NVIDIA Settings (if available)
      ansible.builtin.dnf:
        name: nvidia-settings
        state: present
      when: install_nvidia_settings
      ignore_errors: yes

    # ====== CUDA INSTALLATION ======
    - name: Install CUDA toolkit
      ansible.builtin.dnf:
        name:
          - cuda-toolkit
          - cuda-runtime
        state: present
      when: install_cuda
      register: cuda_install
      ignore_errors: yes

    # ====== POST-INSTALLATION ======
    - name: Configure NVIDIA environment
      ansible.builtin.copy:
        content: |
          # NVIDIA Environment Configuration
          export CUDA_HOME=/usr/local/cuda
          export PATH=$CUDA_HOME/bin:$PATH
          export LD_LIBRARY_PATH=$CUDA_HOME/lib64:$LD_LIBRARY_PATH
        dest: /etc/profile.d/nvidia.sh
        mode: '0755'

    - name: Enable nvidia-persistenced service
      ansible.builtin.systemd:
        name: nvidia-persistenced
        enabled: yes
        state: started
      ignore_errors: yes

    # ====== VERIFICATION ======
    - name: Check what NVIDIA packages were actually installed
      ansible.builtin.shell: rpm -qa | grep -i nvidia
      register: installed_nvidia_packages
      changed_when: false

    - name: Display installed NVIDIA packages
      ansible.builtin.debug:
        msg: "Installed NVIDIA packages: {{ installed_nvidia_packages.stdout_lines }}"

    - name: Test nvidia-smi command
      ansible.builtin.shell: nvidia-smi
      register: nvidia_smi_test
      failed_when: false
      changed_when: false

    - name: Display installation summary
      ansible.builtin.debug:
        msg: |
          NVIDIA Installation Summary:
          
          Installation Method: {{ nvidia_install_method }}
          Packages Installed: {{ installed_nvidia_packages.stdout_lines | length }} NVIDIA packages
          
          {% if nvidia_smi_test.rc == 0 %}
          ✅ nvidia-smi working: Driver loaded successfully
          {% else %}
          ⚠️ nvidia-smi not working: {{ nvidia_smi_test.stderr | default('Reboot may be required') }}
          {% endif %}
          
          Next Steps:
          {% if nvidia_smi_test.rc != 0 %}
          1. Reboot the system to load NVIDIA drivers
          2. Run 'nvidia-smi' to verify installation
          {% else %}
          1. NVIDIA drivers are working!
          2. Test GPU acceleration in applications
          {% endif %}
