---
# Install NVIDIA using AlmaLinux Native Support
# Based on: https://almalinux.org/blog/2025-08-06-announcing-native-nvidia-suport/
- name: Install NVIDIA using AlmaLinux Native Support
  hosts: all
  become: yes
  gather_facts: yes
  
  vars:
    install_cuda: true
    install_nvidia_settings: true
    
  tasks:
    - name: Display AlmaLinux native NVIDIA installation plan
      ansible.builtin.debug:
        msg: |
          🚀 AlmaLinux Native NVIDIA Installation
          
          Target: {{ inventory_hostname }}
          AlmaLinux Version: {{ ansible_distribution_version }}
          
          📦 Using AlmaLinux's native NVIDIA support
          🔗 Reference: https://almalinux.org/blog/2025-08-06-announcing-native-nvidia-suport/
          
          ✅ Benefits:
          • Officially supported by AlmaLinux
          • Better integration with system updates
          • Simplified installation process
          • Enterprise-grade stability

    - name: Check for NVIDIA GPU hardware
      ansible.builtin.shell: lspci | grep -i nvidia
      register: nvidia_hardware
      failed_when: false
      changed_when: false

    - name: Display detected NVIDIA hardware
      ansible.builtin.debug:
        msg: |
          🎮 NVIDIA Hardware:
          {{ nvidia_hardware.stdout_lines | join('\n') if nvidia_hardware.stdout_lines else '❌ No NVIDIA hardware detected' }}

    - name: Fail if no NVIDIA hardware found
      ansible.builtin.fail:
        msg: |
          ❌ No NVIDIA hardware detected on {{ inventory_hostname }}
          
          Please verify:
          1. NVIDIA GPU is properly installed
          2. BIOS settings enable discrete graphics
          3. 'lspci | grep -i vga' shows graphics hardware
      when: nvidia_hardware.stdout == ""

    # ====== ALMALINUX NATIVE NVIDIA INSTALLATION ======
    - name: Update system packages
      ansible.builtin.dnf:
        name: "*"
        state: latest

    - name: Install EPEL repository (may be required for dependencies)
      ansible.builtin.dnf:
        name: epel-release
        state: present

    - name: Enable PowerTools/CRB repository for AlmaLinux 9
      ansible.builtin.shell: dnf config-manager --set-enabled crb
      when: ansible_distribution_major_version == "9"
      ignore_errors: yes

    - name: Enable PowerTools repository for AlmaLinux 8  
      ansible.builtin.shell: dnf config-manager --set-enabled powertools
      when: ansible_distribution_major_version == "8"
      ignore_errors: yes

    - name: Install kernel development packages
      ansible.builtin.dnf:
        name:
          - kernel-devel
          - kernel-headers
          - gcc
          - make
          - dkms
        state: present

    # Using AlmaLinux's native approach
    - name: Install NVIDIA driver using AlmaLinux native method
      ansible.builtin.dnf:
        name:
          - nvidia-driver
          - nvidia-driver-libs
          - nvidia-driver-cuda
          - nvidia-driver-cuda-libs
          - nvidia-modprobe
          - nvidia-persistenced
          - xorg-x11-drv-nvidia
          - nvidia-libXNVCtrl
        state: present
      register: nvidia_install

    - name: Install NVIDIA Settings
      ansible.builtin.dnf:
        name: nvidia-settings
        state: present
      when: install_nvidia_settings

    # ====== CUDA INSTALLATION ======
    - name: Install CUDA packages using native method
      ansible.builtin.dnf:
        name:
          - cuda
          - cuda-toolkit
          - cuda-runtime
        state: present
      when: install_cuda
      register: cuda_install

    # ====== POST-INSTALLATION CONFIGURATION ======
    - name: Configure NVIDIA persistence daemon
      ansible.builtin.systemd:
        name: nvidia-persistenced
        enabled: yes
        state: started
      ignore_errors: yes

    - name: Configure CUDA environment
      ansible.builtin.copy:
        content: |
          # AlmaLinux Native NVIDIA/CUDA Environment
          export CUDA_HOME=/usr/local/cuda
          export PATH=$CUDA_HOME/bin:$PATH
          export LD_LIBRARY_PATH=$CUDA_HOME/lib64:$LD_LIBRARY_PATH
          
          # VFX optimizations
          export __GL_SHADER_DISK_CACHE=1
          export __GL_THREADED_OPTIMIZATIONS=1
        dest: /etc/profile.d/nvidia-almalinux.sh
        mode: '0755'
      when: install_cuda

    - name: Create NOX VFX NVIDIA optimizations
      ansible.builtin.copy:
        content: |
          #!/bin/bash
          # NOX VFX NVIDIA Optimizations for AlmaLinux Native Installation
          
          echo "🎮 Applying NVIDIA optimizations for VFX workstation..."
          
          # GPU performance mode
          if command -v nvidia-settings >/dev/null 2>&1; then
              # Maximum performance mode
              nvidia-settings -a '[gpu:0]/GpuPowerMizerMode=1' 2>/dev/null || true
              echo "✅ GPU set to maximum performance mode"
              
              # Memory and clock optimizations (conservative)
              nvidia-settings -a '[gpu:0]/GPUMemoryTransferRateOffset[3]=500' 2>/dev/null || true
              nvidia-settings -a '[gpu:0]/GPUGraphicsClockOffset[3]=50' 2>/dev/null || true
              echo "✅ Memory and clock optimizations applied"
          fi
          
          # System optimizations
          echo "⚡ System optimizations:"
          echo "• GPU persistence daemon enabled"
          echo "• CUDA environment configured"
          echo "• X.Org NVIDIA driver loaded"
          
          echo "🎨 VFX Applications Ready:"
          echo "• Blender: CUDA rendering available"
          echo "• Krita: OpenGL acceleration enabled"
          echo "• Video editing: Hardware acceleration ready"
        dest: /usr/local/bin/nox-nvidia-optimize.sh
        mode: '0755'

    - name: Create verification script
      ansible.builtin.copy:
        content: |
          #!/bin/bash
          echo "=== AlmaLinux Native NVIDIA Verification ==="
          echo
          
          echo "🎮 NVIDIA Driver (AlmaLinux Native):"
          if command -v nvidia-smi >/dev/null 2>&1; then
              echo "✅ NVIDIA driver active"
              nvidia-smi --query-gpu=name,driver_version --format=csv,noheader
              echo
              echo "💾 Memory:"
              nvidia-smi --query-gpu=memory.used,memory.total --format=csv
          else
              echo "❌ NVIDIA driver not active (reboot required)"
          fi
          echo
          
          {% if install_cuda %}
          echo "🔧 CUDA (AlmaLinux Native):"
          if command -v nvcc >/dev/null 2>&1; then
              echo "✅ CUDA available"
              nvcc --version | grep "release"
          else
              echo "❌ CUDA not available"
          fi
          echo
          {% endif %}
          
          echo "📦 Installation Method: AlmaLinux Native Support"
          echo "🔗 Reference: https://almalinux.org/blog/2025-08-06-announcing-native-nvidia-suport/"
          echo
          echo "🎨 VFX Ready: All NVIDIA-accelerated applications should work"
        dest: /usr/local/bin/verify-almalinux-nvidia.sh
        mode: '0755'

    - name: Check current NVIDIA status
      ansible.builtin.shell: nvidia-smi
      register: nvidia_status
      failed_when: false
      changed_when: false

    - name: Display installation summary
      ansible.builtin.debug:
        msg: |
          🎉 AlmaLinux Native NVIDIA Installation Complete!
          
          📦 Installation Method: AlmaLinux Native Support
          🔗 Based on: https://almalinux.org/blog/2025-08-06-announcing-native-nvidia-suport/
          
          ✅ Installed Components:
          • NVIDIA Driver (native AlmaLinux packages)
          {% if install_cuda %}• CUDA Toolkit (native packages){% endif %}
          {% if install_nvidia_settings %}• NVIDIA Settings GUI{% endif %}
          
          {% if nvidia_status.rc == 0 %}
          🎮 NVIDIA Status: Driver active and working
          {% else %}
          🔄 NVIDIA Status: Reboot required to activate driver
          {% endif %}
          
          🔍 Verification: sudo /usr/local/bin/verify-almalinux-nvidia.sh
          ⚡ Optimization: sudo /usr/local/bin/nox-nvidia-optimize.sh
          
          🎨 Your VFX workstation is ready for GPU-accelerated work!
