---
# Install NVIDIA using AlmaLinux Native Support
# Based on: https://almalinux.org/blog/2025-08-06-announcing-native-nvidia-suport/
- name: Install NVIDIA using AlmaLinux Native Support
  hosts: all
  become: yes
  gather_facts: yes
  
  vars:
    install_cuda: true
    install_nvidia_settings: true
    
  tasks:
    - name: Display AlmaLinux native NVIDIA installation plan
      ansible.builtin.debug:
        msg: |
          🚀 AlmaLinux Native NVIDIA Installation
          
          Target: {{ inventory_hostname }}
          AlmaLinux Version: {{ ansible_distribution_version }}
          
          📦 Using AlmaLinux's native NVIDIA support
          🔗 Reference: https://almalinux.org/blog/2025-08-06-announcing-native-nvidia-suport/
          
          ✅ Benefits:
          • Officially supported by AlmaLinux
          • Better integration with system updates
          • Simplified installation process
          • Enterprise-grade stability

    - name: Check for NVIDIA GPU hardware
      ansible.builtin.shell: lspci | grep -i nvidia
      register: nvidia_hardware
      failed_when: false
      changed_when: false

    - name: Display detected NVIDIA hardware
      ansible.builtin.debug:
        msg: |
          🎮 NVIDIA Hardware:
          {{ nvidia_hardware.stdout_lines | join('\n') if nvidia_hardware.stdout_lines else '❌ No NVIDIA hardware detected' }}

    - name: Fail if no NVIDIA hardware found
      ansible.builtin.fail:
        msg: |
          ❌ No NVIDIA hardware detected on {{ inventory_hostname }}
          
          Please verify:
          1. NVIDIA GPU is properly installed
          2. BIOS settings enable discrete graphics
          3. 'lspci | grep -i vga' shows graphics hardware
      when: nvidia_hardware.stdout == ""

    # ====== ALMALINUX NVIDIA REPOSITORY SETUP ======
    - name: Add NVIDIA repository for AlmaLinux
      ansible.builtin.yum_repository:
        name: nvidia-driver
        description: NVIDIA Driver Repository for AlmaLinux
        baseurl: "https://developer.download.nvidia.com/compute/cuda/repos/rhel{{ ansible_distribution_major_version }}/x86_64/"
        gpgkey: "https://developer.download.nvidia.com/compute/cuda/repos/rhel{{ ansible_distribution_major_version }}/x86_64/D42D0685.pub"
        gpgcheck: yes
        enabled: yes

    - name: Import NVIDIA GPG key
      ansible.builtin.rpm_key:
        key: "https://developer.download.nvidia.com/compute/cuda/repos/rhel{{ ansible_distribution_major_version }}/x86_64/D42D0685.pub"
        state: present

    - name: Update repository cache after adding NVIDIA repo
      ansible.builtin.dnf:
        update_cache: yes

    # ====== ALMALINUX NATIVE NVIDIA INSTALLATION ======
    - name: Update system packages
      ansible.builtin.dnf:
        name: "*"
        state: latest

    - name: Install EPEL repository (may be required for dependencies)
      ansible.builtin.dnf:
        name: epel-release
        state: present

    - name: Enable PowerTools/CRB repository for AlmaLinux 9
      ansible.builtin.shell: dnf config-manager --set-enabled crb
      when: ansible_distribution_major_version == "9"
      ignore_errors: yes

    - name: Enable PowerTools repository for AlmaLinux 8  
      ansible.builtin.shell: dnf config-manager --set-enabled powertools
      when: ansible_distribution_major_version == "8"
      ignore_errors: yes

    - name: Install kernel development packages
      ansible.builtin.dnf:
        name:
          - kernel-devel
          - kernel-headers
          - gcc
          - make
          - dkms
        state: present

    # Using AlmaLinux's native approach
    - name: Install NVIDIA driver using AlmaLinux optimized method
      ansible.builtin.dnf:
        name:
          - nvidia-driver
          - nvidia-driver-libs
          - nvidia-driver-cuda
          - nvidia-driver-cuda-libs
          - nvidia-modprobe
          - nvidia-persistenced
        state: present
      register: nvidia_install
      ignore_errors: yes

    - name: Try alternative NVIDIA installation if first method fails
      ansible.builtin.shell: |
        # Find what NVIDIA packages are actually available
        AVAILABLE_PACKAGES=$(dnf list available 2>/dev/null | grep -E '^nvidia-driver|^kmod-nvidia' | awk '{print $1}' | head -5)
        if [ -n "$AVAILABLE_PACKAGES" ]; then
          dnf install -y $AVAILABLE_PACKAGES
        else
          echo "No NVIDIA driver packages found"
          exit 1
        fi
      when: nvidia_install is failed
      register: nvidia_fallback

    - name: Install X.Org NVIDIA driver
      ansible.builtin.dnf:
        name:
          - xorg-x11-drv-nvidia
          - nvidia-libXNVCtrl
        state: present
      register: xorg_nvidia_install
      ignore_errors: yes

    - name: Try alternative X.Org driver packages if standard packages fail
      ansible.builtin.shell: |
        # Look for any xorg nvidia packages
        XORG_PACKAGES=$(dnf list available 2>/dev/null | grep -E 'xorg.*nvidia|nvidia.*xorg' | awk '{print $1}')
        if [ -n "$XORG_PACKAGES" ]; then
          dnf install -y $XORG_PACKAGES
        fi
      when: xorg_nvidia_install is failed
      ignore_errors: yes

    - name: Install NVIDIA Settings
      ansible.builtin.dnf:
        name: nvidia-settings
        state: present
      when: install_nvidia_settings

    # ====== CUDA INSTALLATION ======
    - name: Add CUDA repository for AlmaLinux
      ansible.builtin.yum_repository:
        name: nvidia-cuda
        description: NVIDIA CUDA Repository for AlmaLinux
        baseurl: "https://developer.download.nvidia.com/compute/cuda/repos/rhel{{ ansible_distribution_major_version }}/x86_64/"
        gpgkey: "https://developer.download.nvidia.com/compute/cuda/repos/rhel{{ ansible_distribution_major_version }}/x86_64/D42D0685.pub"
        gpgcheck: yes
        enabled: yes
      when: install_cuda

    - name: Install CUDA packages using optimized method
      ansible.builtin.dnf:
        name:
          - cuda-toolkit
          - cuda-runtime
          - cuda-command-line-tools
          - nvidia-utils
        state: present
      when: install_cuda
      register: cuda_install
      ignore_errors: yes

    - name: Install additional NVIDIA utilities
      ansible.builtin.dnf:
        name:
          - nvidia-driver-cuda  # Ensures nvidia-smi is available
          - nvidia-utils
        state: present
      ignore_errors: yes

    # ====== POST-INSTALLATION CONFIGURATION ======
    - name: Configure NVIDIA persistence daemon
      ansible.builtin.systemd:
        name: nvidia-persistenced
        enabled: yes
        state: started
      ignore_errors: yes

    - name: Configure NVIDIA environment
      ansible.builtin.copy:
        content: |
          # AlmaLinux Native NVIDIA/CUDA Environment
          export CUDA_HOME=/usr/local/cuda
          export PATH="$CUDA_HOME/bin:/usr/bin:$PATH"
          export LD_LIBRARY_PATH=$CUDA_HOME/lib64:$LD_LIBRARY_PATH
          
          # VFX optimizations
          export __GL_SHADER_DISK_CACHE=1
          export __GL_THREADED_OPTIMIZATIONS=1
          
          # Ensure NVIDIA tools are in PATH
          export PATH="/usr/bin:/usr/local/cuda/bin:$PATH"
        dest: /etc/profile.d/nvidia-almalinux.sh
        mode: '0755'
      when: install_cuda

    # ====== POST-INSTALLATION VERIFICATION AND SETUP ======
    - name: Check what NVIDIA packages were installed
      ansible.builtin.shell: rpm -qa | grep -i nvidia
      register: installed_nvidia_packages
      changed_when: false

    - name: Display installed NVIDIA packages
      ansible.builtin.debug:
        msg: "Installed NVIDIA packages: {{ installed_nvidia_packages.stdout_lines | length }} packages"

    - name: Check if nvidia-smi is available
      ansible.builtin.shell: which nvidia-smi
      register: nvidia_smi_location
      failed_when: false
      changed_when: false

    - name: Try to load NVIDIA modules manually
      ansible.builtin.shell: |
        modprobe nvidia 2>/dev/null || echo "Manual module load failed - reboot required"
        modprobe nvidia_drm 2>/dev/null || echo "DRM module load failed"
        modprobe nvidia_modeset 2>/dev/null || echo "Modeset module load failed"
      register: manual_module_load
      failed_when: false

    - name: Check current NVIDIA modules
      ansible.builtin.shell: lsmod | grep nvidia
      register: nvidia_modules_loaded
      failed_when: false
      changed_when: false

    - name: Test nvidia-smi functionality
      ansible.builtin.shell: nvidia-smi
      register: nvidia_smi_test
      failed_when: false
      changed_when: false

    - name: Create NOX VFX NVIDIA optimizations
      ansible.builtin.copy:
        content: |
          #!/bin/bash
          # NOX VFX NVIDIA Optimizations for AlmaLinux Native Installation
          
          echo "🎮 Applying NVIDIA optimizations for VFX workstation..."
          
          # GPU performance mode
          if command -v nvidia-settings >/dev/null 2>&1; then
              # Maximum performance mode
              nvidia-settings -a '[gpu:0]/GpuPowerMizerMode=1' 2>/dev/null || true
              echo "✅ GPU set to maximum performance mode"
              
              # Memory and clock optimizations (conservative)
              nvidia-settings -a '[gpu:0]/GPUMemoryTransferRateOffset[3]=500' 2>/dev/null || true
              nvidia-settings -a '[gpu:0]/GPUGraphicsClockOffset[3]=50' 2>/dev/null || true
              echo "✅ Memory and clock optimizations applied"
          fi
          
          # System optimizations
          echo "⚡ System optimizations:"
          echo "• GPU persistence daemon enabled"
          echo "• CUDA environment configured"
          echo "• X.Org NVIDIA driver loaded"
          
          echo "🎨 VFX Applications Ready:"
          echo "• Blender: CUDA rendering available"
          echo "• Krita: OpenGL acceleration enabled"
          echo "• Video editing: Hardware acceleration ready"
        dest: /usr/local/bin/nox-nvidia-optimize.sh
        mode: '0755'

    - name: Create comprehensive NVIDIA verification script
      ansible.builtin.copy:
        content: |
          #!/bin/bash
          echo "=== AlmaLinux Native NVIDIA Verification ==="
          echo
          
          echo "📦 Installed NVIDIA Packages:"
          rpm -qa | grep nvidia | sort
          echo
          
          echo "🔧 NVIDIA Command Availability:"
          if command -v nvidia-smi >/dev/null 2>&1; then
              echo "✅ nvidia-smi: $(which nvidia-smi)"
          else
              echo "❌ nvidia-smi: Not found"
          fi
          
          if command -v nvidia-settings >/dev/null 2>&1; then
              echo "✅ nvidia-settings: Available"
          else
              echo "❌ nvidia-settings: Not found"
          fi
          echo
          
          echo "🎮 NVIDIA Kernel Modules:"
          if lsmod | grep -q nvidia; then
              echo "✅ NVIDIA modules loaded:"
              lsmod | grep nvidia | awk '{print "   " $1 " (" $3 " deps)"}'
          else
              echo "❌ No NVIDIA modules loaded (reboot required)"
          fi
          echo
          
          echo "💻 GPU Status:"
          if nvidia-smi >/dev/null 2>&1; then
              echo "✅ NVIDIA driver active:"
              nvidia-smi --query-gpu=name,driver_version,memory.total --format=csv,noheader | sed 's/^/   /'
              echo
              echo "   GPU Utilization:"
              nvidia-smi --query-gpu=utilization.gpu,utilization.memory --format=csv,noheader | sed 's/^/   /'
          else
              echo "❌ NVIDIA driver not active"
              echo "   Hardware: $(lspci | grep -i nvidia | head -1 || echo 'No NVIDIA hardware')"
              echo "   Status: Reboot required to load drivers"
          fi
          echo
          
          {% if install_cuda %}
          echo "🔧 CUDA Status:"
          if command -v nvcc >/dev/null 2>&1; then
              echo "✅ CUDA available: $(nvcc --version | grep "release" | awk '{print $6}' | cut -d',' -f1)"
          else
              echo "❌ CUDA not available"
          fi
          echo
          {% endif %}
          
          echo "🎯 VFX Applications Ready:"
          if nvidia-smi >/dev/null 2>&1; then
              echo "✅ Blender: GPU rendering available"
              echo "✅ Nuke: GPU acceleration ready"
              echo "✅ DaVinci Resolve: GPU processing enabled"
          else
              echo "⚠️ VFX apps will work after reboot"
          fi
          echo
          
          echo "📋 Summary:"
          if nvidia-smi >/dev/null 2>&1; then
              echo "🎉 NVIDIA is fully functional!"
              echo "   Ready for professional VFX work"
          else
              echo "🔄 Reboot required to complete setup"
              echo "   Run: sudo reboot"
              echo "   Then: nvidia-smi"
          fi
        dest: /usr/local/bin/verify-almalinux-nvidia.sh
        mode: '0755'

    - name: Run comprehensive verification
      ansible.builtin.shell: /usr/local/bin/verify-almalinux-nvidia.sh
      register: comprehensive_verification
      changed_when: false

    - name: Display verification results
      ansible.builtin.debug:
        msg: "{{ comprehensive_verification.stdout }}"

    - name: Determine if reboot is needed
      ansible.builtin.set_fact:
        nvidia_reboot_needed: "{{ nvidia_smi_test.rc != 0 or nvidia_modules_loaded.stdout == '' }}"

    - name: Display installation summary
      ansible.builtin.debug:
        msg: |
          🎉 AlmaLinux Native NVIDIA Installation Complete!
          
          📦 Installation Method: AlmaLinux Optimized (with NVIDIA repositories)
          🔗 Based on: https://almalinux.org/blog/2025-08-06-announcing-native-nvidia-suport/
          
          ✅ Installed Components:
          • NVIDIA Driver ({{ installed_nvidia_packages.stdout_lines | length }} packages)
          {% if install_cuda %}• CUDA Toolkit and utilities{% endif %}
          {% if install_nvidia_settings %}• NVIDIA Settings GUI{% endif %}
          • nvidia-smi monitoring tool
          
          {% if nvidia_reboot_needed %}
          🔄 REBOOT REQUIRED:
          The NVIDIA drivers are installed but need a reboot to activate.
          
          Next steps:
          1. Reboot: ansible {{ inventory_hostname }} -m reboot
          2. Verify: ansible {{ inventory_hostname }} -m shell -a 'nvidia-smi'
          3. Test VFX apps: Launch Blender and check GPU rendering
          {% else %}
          ✅ NVIDIA Status: Active and ready!
          GPU acceleration is available for VFX applications.
          {% endif %}
          
          🔍 Verification: /usr/local/bin/verify-almalinux-nvidia.sh
          🎨 Your VFX workstation is ready for professional work!

    # ====== OPTIONAL AUTOMATIC REBOOT ======
    - name: Prompt for immediate reboot (if interactive)
      ansible.builtin.pause:
        prompt: |
          
          NVIDIA drivers installed successfully but require reboot to activate.
          
          Reboot {{ inventory_hostname }} now to complete setup? (y/N)
        seconds: 1
      register: reboot_prompt
      when: 
        - nvidia_reboot_needed
        - ansible_connection != 'local'
        - not ansible_check_mode

    - name: Reboot system to activate NVIDIA drivers
      ansible.builtin.reboot:
        reboot_timeout: 300
        msg: "Rebooting to activate NVIDIA drivers for VFX workstation"
        post_reboot_delay: 30
      when: 
        - nvidia_reboot_needed
        - reboot_prompt is defined
        - reboot_prompt.user_input | default('n') | lower in ['y', 'yes']

    - name: Verify NVIDIA after reboot
      ansible.builtin.shell: /usr/local/bin/verify-almalinux-nvidia.sh
      register: post_reboot_verification
      changed_when: false
      when: 
        - nvidia_reboot_needed
        - reboot_prompt is defined
        - reboot_prompt.user_input | default('n') | lower in ['y', 'yes']

    - name: Display post-reboot status
      ansible.builtin.debug:
        msg: |
          🎉 Post-Reboot NVIDIA Verification:
          
          {{ post_reboot_verification.stdout if post_reboot_verification is defined else 'Reboot was skipped - run manually when ready' }}
          
          {% if post_reboot_verification is defined %}
          Your NOX VFX workstation is now fully operational with GPU acceleration!
          {% endif %}
      when: post_reboot_verification is defined
