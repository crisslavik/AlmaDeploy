---
# Install NVIDIA Drivers and CUDA for NOX VFX Workstations
- name: Install NVIDIA Drivers and CUDA Support
  hosts: all
  become: yes
  gather_facts: yes
  
  vars:
    # NVIDIA configuration
    nvidia_driver_branch: "550"  # Latest stable branch
    install_cuda: true
    install_nvidia_container_toolkit: true
    install_nvidia_settings: true
    
    # CUDA toolkit version
    cuda_version: "12.6"
    
  tasks:
    - name: Display NVIDIA installation plan
      ansible.builtin.debug:
        msg: |
          🎮 NVIDIA/CUDA Installation for NOX VFX
          
          Target: {{ inventory_hostname }}
          
          📦 Components to install:
          • NVIDIA Driver: Branch {{ nvidia_driver_branch }}
          • CUDA Toolkit: {{ 'v' + cuda_version if install_cuda else 'No' }}
          • NVIDIA Settings: {{ 'Yes' if install_nvidia_settings else 'No' }}
          • Container Toolkit: {{ 'Yes' if install_nvidia_container_toolkit else 'No' }}
          
          ⚠️  System will require reboot after installation
          🔍 Checking for NVIDIA hardware...

    - name: Check for NVIDIA GPU hardware
      ansible.builtin.shell: lspci | grep -i nvidia
      register: nvidia_hardware
      failed_when: false
      changed_when: false

    - name: Display NVIDIA hardware found
      ansible.builtin.debug:
        msg: |
          🎮 NVIDIA Hardware Detection:
          {{ nvidia_hardware.stdout_lines | join('\n') if nvidia_hardware.stdout_lines else 'No NVIDIA hardware detected' }}
      
    - name: Fail if no NVIDIA hardware detected
      ansible.builtin.fail:
        msg: |
          ❌ No NVIDIA hardware detected on {{ inventory_hostname }}
          
          This playbook is designed for systems with NVIDIA GPUs.
          If you have NVIDIA hardware but it's not detected:
          1. Check if GPU is properly seated
          2. Verify BIOS settings (discrete graphics enabled)
          3. Check 'lspci | grep -i vga' for all graphics hardware
      when: nvidia_hardware.stdout == ""

    # ====== REPOSITORY SETUP ======
    - name: Add NVIDIA repository for AlmaLinux
      ansible.builtin.yum_repository:
        name: nvidia-driver
        description: NVIDIA Driver Repository
        baseurl: "https://developer.download.nvidia.com/compute/cuda/repos/rhel{{ ansible_distribution_major_version }}/x86_64/"
        gpgkey: "https://developer.download.nvidia.com/compute/cuda/repos/rhel{{ ansible_distribution_major_version }}/x86_64/D42D0685.pub"
        gpgcheck: yes
        enabled: yes

    - name: Add NVIDIA CUDA repository
      ansible.builtin.yum_repository:
        name: nvidia-cuda
        description: NVIDIA CUDA Repository  
        baseurl: "https://developer.download.nvidia.com/compute/cuda/repos/rhel{{ ansible_distribution_major_version }}/x86_64/"
        gpgkey: "https://developer.download.nvidia.com/compute/cuda/repos/rhel{{ ansible_distribution_major_version }}/x86_64/D42D0685.pub"
        gpgcheck: yes
        enabled: yes
      when: install_cuda

    # ====== KERNEL AND DEPENDENCIES ======
    - name: Install kernel development packages
      ansible.builtin.dnf:
        name:
          - kernel-devel
          - kernel-headers
          - gcc
          - make
          - dkms
          - elfutils-libelf-devel
        state: present

    - name: Update system packages
      ansible.builtin.dnf:
        name: "*"
        state: latest
      register: system_update

    # ====== NVIDIA DRIVER INSTALLATION ======
    - name: Install NVIDIA driver packages
      ansible.builtin.dnf:
        name:
          - "nvidia-driver:{{ nvidia_driver_branch }}"
          - nvidia-driver-libs
          - nvidia-driver-cuda
          - nvidia-driver-cuda-libs
          - nvidia-modprobe
          - nvidia-persistenced
        state: present
      register: nvidia_driver_install

    - name: Install NVIDIA X.Org driver
      ansible.builtin.dnf:
        name:
          - xorg-x11-drv-nvidia
          - nvidia-libXNVCtrl
        state: present
      when: ansible_facts['virtualization_type'] != 'docker'

    - name: Install NVIDIA Settings GUI
      ansible.builtin.dnf:
        name: nvidia-settings
        state: present
      when: install_nvidia_settings

    # ====== CUDA TOOLKIT INSTALLATION ======
    - name: Install CUDA Toolkit
      ansible.builtin.dnf:
        name:
          - cuda-toolkit
          - cuda-runtime
          - cuda-drivers
        state: present
      when: install_cuda
      register: cuda_install

    - name: Install additional CUDA libraries for VFX
      ansible.builtin.dnf:
        name:
          - cuda-nvml-dev
          - cuda-nvcc
          - cuda-curand
          - cuda-cufft
          - cuda-cublas
          - cuda-cusparse
          - cuda-cusolver
        state: present
      when: install_cuda
      ignore_errors: yes

    # ====== NVIDIA CONTAINER TOOLKIT ======
    - name: Add NVIDIA Container Toolkit repository
      ansible.builtin.yum_repository:
        name: nvidia-container-toolkit
        description: NVIDIA Container Toolkit Repository
        baseurl: "https://nvidia.github.io/libnvidia-container/stable/rpm/x86_64/"
        gpgkey: "https://nvidia.github.io/libnvidia-container/gpgkey"
        gpgcheck: yes
        enabled: yes
      when: install_nvidia_container_toolkit

    - name: Install NVIDIA Container Toolkit
      ansible.builtin.dnf:
        name: nvidia-container-toolkit
        state: present
      when: install_nvidia_container_toolkit

    # ====== CONFIGURATION ======
    - name: Create NVIDIA persistence daemon config
      ansible.builtin.copy:
        content: |
          # NVIDIA Persistence Daemon Configuration
          # Keeps NVIDIA driver loaded for faster application startup
          # Essential for VFX workstations
          --persistence-mode
          --user nvidia-persistenced
        dest: /etc/nvidia-persistenced.conf
        mode: '0644'

    - name: Enable NVIDIA persistence daemon
      ansible.builtin.systemd:
        name: nvidia-persistenced
        enabled: yes
        state: started
      ignore_errors: yes

    - name: Configure CUDA environment variables
      ansible.builtin.copy:
        content: |
          # NVIDIA CUDA Environment Configuration for NOX VFX
          export CUDA_HOME=/usr/local/cuda
          export PATH=$CUDA_HOME/bin:$PATH
          export LD_LIBRARY_PATH=$CUDA_HOME/lib64:$LD_LIBRARY_PATH
          
          # NVIDIA optimizations for VFX applications
          export __GL_SHADER_DISK_CACHE=1
          export __GL_SHADER_DISK_CACHE_PATH=/tmp
          export __GL_THREADED_OPTIMIZATIONS=1
          
          # Blender CUDA configuration
          export CYCLES_CUDA_BINARIES_ARCH=sm_50,sm_52,sm_60,sm_61,sm_70,sm_75,sm_80,sm_86
        dest: /etc/profile.d/nvidia-cuda.sh
        mode: '0755'
      when: install_cuda

    - name: Configure X.Org for NVIDIA
      ansible.builtin.copy:
        content: |
          # NOX VFX NVIDIA X.Org Configuration
          Section "ServerLayout"
              Identifier     "Layout0"
              Screen      0  "Screen0" 0 0
              InputDevice    "Keyboard0" "CoreKeyboard"
              InputDevice    "Mouse0" "CorePointer"
          EndSection
          
          Section "Files"
          EndSection
          
          Section "InputDevice"
              Identifier     "Mouse0"
              Driver         "mouse"
              Option         "Protocol" "auto"
              Option         "Device" "/dev/psaux"
              Option         "Emulate3Buttons" "no"
              Option         "ZAxisMapping" "4 5"
          EndSection
          
          Section "InputDevice"
              Identifier     "Keyboard0"
              Driver         "kbd"
          EndSection
          
          Section "Monitor"
              Identifier     "Monitor0"
              VendorName     "Unknown"
              ModelName      "Unknown"
              Option         "DPMS"
          EndSection
          
          Section "Device"
              Identifier     "Device0"
              Driver         "nvidia"
              VendorName     "NVIDIA Corporation"
              # Performance optimizations for VFX work
              Option         "NoLogo" "true"
              Option         "UseEdidDpi" "false"
              Option         "DPI" "96 x 96"
              Option         "TripleBuffer" "true"
              Option         "UseCompositeWrapper" "false"
          EndSection
          
          Section "Screen"
              Identifier     "Screen0"
              Device         "Device0"
              Monitor        "Monitor0"
              DefaultDepth    24
              SubSection     "Display"
                  Depth       24
              EndSubSection
          EndSection
        dest: /etc/X11/xorg.conf.d/10-nvidia.conf
        mode: '0644'
      when: ansible_facts['virtualization_type'] != 'docker'

    # ====== VFX APPLICATION OPTIMIZATIONS ======
    - name: Create VFX NVIDIA optimizations script
      ansible.builtin.copy:
        content: |
          #!/bin/bash
          # NOX VFX NVIDIA Optimizations
          
          # Set GPU performance mode (requires nvidia-settings)
          if command -v nvidia-settings >/dev/null 2>&1; then
              echo "Setting NVIDIA GPU to maximum performance mode..."
              
              # Set power management to maximum performance
              nvidia-settings -a '[gpu:0]/GpuPowerMizerMode=1' 2>/dev/null || true
              
              # Set memory transfer rate to maximum
              nvidia-settings -a '[gpu:0]/GPUMemoryTransferRateOffset[3]=1000' 2>/dev/null || true
              
              # Set GPU clock offset (conservative)
              nvidia-settings -a '[gpu:0]/GPUGraphicsClockOffset[3]=100' 2>/dev/null || true
              
              echo "NVIDIA optimizations applied for VFX workstation"
          fi
          
          # Set NVIDIA driver performance settings
          if [ -w /sys/bus/pci/devices ]; then
              echo "Configuring NVIDIA driver settings..."
              echo performance > /sys/module/nvidia/parameters/NVreg_DeviceFileGID 2>/dev/null || true
          fi
        dest: /usr/local/bin/nvidia-vfx-optimize.sh
        mode: '0755'

    # ====== VERIFICATION ======
    - name: Verify NVIDIA driver installation
      ansible.builtin.shell: nvidia-smi
      register: nvidia_smi_check
      failed_when: false
      changed_when: false

    - name: Verify CUDA installation
      ansible.builtin.shell: nvcc --version
      register: nvcc_check
      failed_when: false
      changed_when: false
      when: install_cuda

    - name: Display installation results
      ansible.builtin.debug:
        msg: |
          🎮 NVIDIA/CUDA Installation Results:
          
          📊 NVIDIA Driver Status:
          {{ nvidia_smi_check.stdout if nvidia_smi_check.rc == 0 else 'Driver not active (reboot required)' }}
          
          {% if install_cuda and nvcc_check.rc == 0 %}
          🔧 CUDA Status:
          {{ nvcc_check.stdout_lines[0] if nvcc_check.stdout_lines else 'CUDA installed' }}
          {% endif %}
          
          ⚠️  {% if nvidia_smi_check.rc != 0 %}REBOOT REQUIRED{% else %}Installation appears successful{% endif %}

    - name: Create NVIDIA verification script
      ansible.builtin.copy:
        content: |
          #!/bin/bash
          echo "=== NOX VFX NVIDIA/CUDA Verification ==="
          echo
          
          echo "🎮 NVIDIA Driver:"
          if command -v nvidia-smi >/dev/null 2>&1; then
              nvidia-smi --query-gpu=name,driver_version,memory.total --format=csv,noheader
              echo
              echo "💾 GPU Memory Usage:"
              nvidia-smi --query-gpu=memory.used,memory.total --format=csv,noheader,nounits
          else
              echo "❌ nvidia-smi not available (reboot may be required)"
          fi
          echo
          
          {% if install_cuda %}
          echo "🔧 CUDA Toolkit:"
          if command -v nvcc >/dev/null 2>&1; then
              nvcc --version | grep "release"
              echo
              echo "📚 CUDA Libraries:"
              ls -la /usr/local/cuda/lib64/ | grep -E "(cublas|cufft|curand)" | head -5
          else
              echo "❌ CUDA toolkit not available"
          fi
          echo
          {% endif %}
          
          echo "🔬 VFX Application Tests:"
          echo "• Blender CUDA: Run Blender > Preferences > System > Cycles Render Devices"
          echo "• Krita OpenGL: Run Krita > Settings > Configure Krita > Display"
          echo "• System Monitor: Run 'watch -n1 nvidia-smi' to monitor GPU usage"
          
          echo
          echo "⚡ Performance Optimization:"
          echo "Run: sudo /usr/local/bin/nvidia-vfx-optimize.sh"
        dest: /usr/local/bin/verify-nvidia-cuda.sh
        mode: '0755'

    - name: Display completion message
      ansible.builtin.debug:
        msg: |
          🎉 NVIDIA/CUDA Installation Complete!
          
          📋 What was installed:
          • NVIDIA Driver (Branch {{ nvidia_driver_branch }})
          {% if install_cuda %}• CUDA Toolkit v{{ cuda_version }}{% endif %}
          {% if install_nvidia_settings %}• NVIDIA Settings GUI{% endif %}
          {% if install_nvidia_container_toolkit %}• NVIDIA Container Toolkit{% endif %}
          
          🔄 IMPORTANT: System reboot required to activate drivers!
          
          📊 After reboot, verify installation:
          sudo /usr/local/bin/verify-nvidia-cuda.sh
          
          ⚡ Optimize for VFX work:
          sudo /usr/local/bin/nvidia-vfx-optimize.sh
          
          🎨 VFX Applications:
          • Blender: CUDA devices should appear in Cycles preferences  
          • Krita: OpenGL acceleration should be available
          • General: GPU-accelerated rendering and compute tasks enabled
